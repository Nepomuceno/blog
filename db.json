{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/gettingAccessKeys.png","path":"images/gettingAccessKeys.png","modified":0,"renderable":0},{"_id":"source/images/table-storage-price.png","path":"images/table-storage-price.png","modified":0,"renderable":0},{"_id":"source/images/table-storage-transactions.png","path":"images/table-storage-transactions.png","modified":0,"renderable":0},{"_id":"themes/brewski/source/favicon.svg","path":"favicon.svg","modified":0,"renderable":1},{"_id":"themes/brewski/source/logo.svg","path":"logo.svg","modified":0,"renderable":1},{"_id":"themes/brewski/source/css/theme.css","path":"css/theme.css","modified":0,"renderable":1},{"_id":"source/images/table-created-storage.png","path":"images/table-created-storage.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/_drafts/Imutable-data-retention-pipeline.md","hash":"040b6574526ff3dae260d19667f6684652281d4c","modified":1531030911320},{"_id":"source/_drafts/building-the-blog.md","hash":"0597b4c53f1a1ae35cc9b7f04dbb9cfd967ce9a2","modified":1531030911321},{"_id":"source/_drafts/rant-about-ms.md","hash":"2088fdab159932f8e858ff361d516f53d15d79f6","modified":1531030911321},{"_id":"source/_posts/govendor-on-windows.md","hash":"a59a346f0beaba9072390f1fb2831c3de884be2c","modified":1531030911322},{"_id":"source/_posts/dns-as-code-terraform-azure.md","hash":"f6c911cd64ed0c34bd604237d7dd9cc5ddd0947a","modified":1531030911322},{"_id":"source/_posts/hamiltonian-path-problem.md","hash":"7677392acb92a6fb92d860a0d0205ce2a12974be","modified":1531030911323},{"_id":"source/_posts/using-table-storage-in-typescript.md","hash":"7986003945ff591e86470a8ffa147605375516be","modified":1531080288874},{"_id":"source/images/gettingAccessKeys.png","hash":"1ce0da278b576baf6bef68ec25b4513804a2d1fe","modified":1531035456862},{"_id":"source/images/table-storage-price.png","hash":"3cad561de085c69529fbdcf41f3c1c379fc7cdf3","modified":1531031971022},{"_id":"source/images/table-storage-transactions.png","hash":"5d9866f6ff3eb7b7e74db4f53f678b3818a6d1ae","modified":1531032023478},{"_id":"source/about/index.md","hash":"ed12bee74e752cead03458ef6e533876d57cf3f1","modified":1531030911323},{"_id":"public/atom.xml","hash":"3acd2ee532a8db22f4a353a50cc7d82556cc6bd1","modified":1531081133611},{"_id":"public/sitemap.xml","hash":"7b3f0c9a6721af0237aae07a7e00bdb42847c20d","modified":1531081133617},{"_id":"public/about/index.html","hash":"4776ef8f825379a81d4650fc4c8e0475cc66af7f","modified":1531041691770},{"_id":"public/archives/index.html","hash":"72f5b50324d9d43eaa3bf2e06fdd506600fa8aaf","modified":1531041691770},{"_id":"public/archives/2018/index.html","hash":"72f5b50324d9d43eaa3bf2e06fdd506600fa8aaf","modified":1531041691770},{"_id":"public/archives/2018/01/index.html","hash":"c509cfc5211a8205c1bb493ddc258a8917015674","modified":1531041691771},{"_id":"public/2018/01/29/hamiltonian-path-problem/index.html","hash":"59209419fd23b8b42e7d18888914007ea49721cb","modified":1531041691770},{"_id":"public/2018/02/26/govendor-on-windows/index.html","hash":"615a3d49c91335650cb3f07ebb2ce1cc99505948","modified":1531041691770},{"_id":"public/archives/2018/02/index.html","hash":"c5c5f718191939b8d7d0fce4f484a721c2e77eb8","modified":1531041691771},{"_id":"public/2018/02/28/dns-as-code-terraform-azure/index.html","hash":"d8d06aaa70ab0858d70fd17c89ef89e685e342f1","modified":1531041691770},{"_id":"public/index.html","hash":"574c19ae8471c40fc7fac3d626c6a31df7174b8d","modified":1531081133672},{"_id":"public/2018/07/08/using-table-storage-in-typescript/index.html","hash":"844d2af377869a0ea0137359f173dd643f896fb6","modified":1531081133670},{"_id":"public/archives/2018/07/index.html","hash":"6a3bf38f5b537f9774aec9ef4d7c5816afa4abd5","modified":1531041691770},{"_id":"themes/brewski/.git","hash":"a8e6327393dec1217fbec1c7892d5b2867c30ab2","modified":1531040712008},{"_id":"themes/brewski/README.md","hash":"6a113823d9a7e27132ec2729427f81c005b40c86","modified":1531040712445},{"_id":"themes/brewski/package.json","hash":"6c0ae96b2bdd1ab4d62b12a750cf1c05fdeb974d","modified":1531040712499},{"_id":"themes/brewski/LICENSE","hash":"265c646d5553152686af7d51ef774362610ce22a","modified":1531040712444},{"_id":"themes/brewski/.gitignore","hash":"aec56243aebe8fc6e6492c9f478418623db1129e","modified":1531040712438},{"_id":"themes/brewski/_config.yml","hash":"5d2a84bc4f59724b3626ecc4d285ba8b1eaa4ae9","modified":1531040712448},{"_id":"themes/brewski/languages/en.yml","hash":"a479ac7e33f3b82ed3da3f9637a491a9de3e3eb7","modified":1531040712451},{"_id":"themes/brewski/layout/archive.pug","hash":"ee65dd10e1824265d68863d0538f32a55118a00b","modified":1531040712455},{"_id":"themes/brewski/layout/index.pug","hash":"ad82ff39d9c1a21b5fa34244f47dca1ea4b6b06e","modified":1531040712459},{"_id":"themes/brewski/layout/page.pug","hash":"f7da81e7f18e39d68bc3e18ce310673294e3f2dd","modified":1531040712476},{"_id":"themes/brewski/source/favicon.svg","hash":"fc8c6c0cc8ac99438b421d906ba406a965be85d8","modified":1531040712500},{"_id":"themes/brewski/source/logo.svg","hash":"cfdd3811fddcf6a48508d9c79bbbc806baa5bff8","modified":1531040712504},{"_id":"themes/brewski/layout/mixins/paginator.pug","hash":"68b407aab4413db39c6d93c52f151078e026277e","modified":1531040712463},{"_id":"themes/brewski/layout/mixins/post.pug","hash":"8670cd47020a3451ef011c03827dbdfad56e197b","modified":1531040712473},{"_id":"themes/brewski/layout/partial/copyright.pug","hash":"57b128e595217f8b146ca289145a034512a7109c","modified":1531040712484},{"_id":"themes/brewski/layout/partial/head.pug","hash":"dfe96f81a8450de418fdf6df7063bd496bb630c6","modified":1531040712484},{"_id":"themes/brewski/layout/partial/layout.pug","hash":"295bda2256fd79c87eb5ed4dfd100ebdc8c6aad5","modified":1531040712488},{"_id":"themes/brewski/layout/partial/nav.pug","hash":"32cc975be4342811ef07d8c0fb50deba9d07a421","modified":1531040712491},{"_id":"themes/brewski/layout/partial/comment.pug","hash":"27a3c64b7023dddb09a6afee7140b4a87eaa6073","modified":1531040712480},{"_id":"themes/brewski/layout/partial/scripts.pug","hash":"491637a03b937fb7377c7c4ea0a2d2caf553bc63","modified":1531040712495},{"_id":"themes/brewski/layout/post.pug","hash":"e46a43097a8241db9bc865b8a21830dd66ec666d","modified":1531040712495},{"_id":"themes/brewski/source/css/theme.css","hash":"c630262f1766186af31c8f35fffa5c89e430ba57","modified":1531040712500},{"_id":"public/favicon.svg","hash":"fc8c6c0cc8ac99438b421d906ba406a965be85d8","modified":1531041691774},{"_id":"public/logo.svg","hash":"cfdd3811fddcf6a48508d9c79bbbc806baa5bff8","modified":1531041691774},{"_id":"public/css/theme.css","hash":"718f3e049f1f8d4c980581dd7c1f9fc9ecf73a97","modified":1531041691787},{"_id":"source/images/table-created-storage.png","hash":"676450c2e6b4ecd95b146c24f5fc097689f8b137","modified":1531042599007},{"_id":"public/images/table-created-storage.png","hash":"676450c2e6b4ecd95b146c24f5fc097689f8b137","modified":1531042701003}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2018-01-29T12:27:35.000Z","_content":"This is one amazing blog ;)","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-01-29 12:27:35\n---\nThis is one amazing blog ;)","updated":"2018-07-08T06:21:51.323Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjjck5mni0007ecmriysp5qkf","content":"<p>This is one amazing blog ;)</p>\n","site":{"data":{}},"excerpt":"","more":"<p>This is one amazing blog ;)</p>\n"}],"Post":[{"title":"Building this blog","_content":"\n## Choosing the blog platform\n\nEvery time that I try to stat bloggin I always get stuck on the building the blog effort. I think I honestly started a least 4 blogs and stopped just on the fact that I havent choosen the blog engine. I passed to the most diferent kind of blogs. I used [Wordpress](https://wordpress.com/) [jerkyll]() among others.\n\nOne thing that I had certain it was that I wanted something that would be using [markdown](). There has been some time that I have been using markdown to take all my notes and I got really confortable with it, it remembers me a bit the times of Uni and using [Tex]() but only much simples to write.\n\nWith this recomendation I asked [Ben](blog.bencoleman.co.uk) which blog engine he was using and he introduced me to  [Hexo](https://hexo.io/), It is awesome and I honestly can't recomend it highly enough. It has been working really well for me and if you like markdown I honestly suggest you to go for it to. not only that but you can do most of the things from the command line with the [hexo-cli](https://www.npmjs.com/package/hexo-cli).\n","source":"_drafts/building-the-blog.md","raw":"---\ntitle: Building this blog\n---\n\n## Choosing the blog platform\n\nEvery time that I try to stat bloggin I always get stuck on the building the blog effort. I think I honestly started a least 4 blogs and stopped just on the fact that I havent choosen the blog engine. I passed to the most diferent kind of blogs. I used [Wordpress](https://wordpress.com/) [jerkyll]() among others.\n\nOne thing that I had certain it was that I wanted something that would be using [markdown](). There has been some time that I have been using markdown to take all my notes and I got really confortable with it, it remembers me a bit the times of Uni and using [Tex]() but only much simples to write.\n\nWith this recomendation I asked [Ben](blog.bencoleman.co.uk) which blog engine he was using and he introduced me to  [Hexo](https://hexo.io/), It is awesome and I honestly can't recomend it highly enough. It has been working really well for me and if you like markdown I honestly suggest you to go for it to. not only that but you can do most of the things from the command line with the [hexo-cli](https://www.npmjs.com/package/hexo-cli).\n","slug":"building-the-blog","published":0,"date":"2018-07-08T06:21:51.320Z","updated":"2018-07-08T06:21:51.321Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjck5mn50000ecmr9j7mgnzf","content":"<h2 id=\"Choosing-the-blog-platform\"><a href=\"#Choosing-the-blog-platform\" class=\"headerlink\" title=\"Choosing the blog platform\"></a>Choosing the blog platform</h2><p>Every time that I try to stat bloggin I always get stuck on the building the blog effort. I think I honestly started a least 4 blogs and stopped just on the fact that I havent choosen the blog engine. I passed to the most diferent kind of blogs. I used <a href=\"https://wordpress.com/\" target=\"_blank\" rel=\"noopener\">Wordpress</a> <a href=\"\">jerkyll</a> among others.</p>\n<p>One thing that I had certain it was that I wanted something that would be using <a href=\"\">markdown</a>. There has been some time that I have been using markdown to take all my notes and I got really confortable with it, it remembers me a bit the times of Uni and using <a href=\"\">Tex</a> but only much simples to write.</p>\n<p>With this recomendation I asked <a href=\"blog.bencoleman.co.uk\">Ben</a> which blog engine he was using and he introduced me to  <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>, It is awesome and I honestly can’t recomend it highly enough. It has been working really well for me and if you like markdown I honestly suggest you to go for it to. not only that but you can do most of the things from the command line with the <a href=\"https://www.npmjs.com/package/hexo-cli\" target=\"_blank\" rel=\"noopener\">hexo-cli</a>.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Choosing-the-blog-platform\"><a href=\"#Choosing-the-blog-platform\" class=\"headerlink\" title=\"Choosing the blog platform\"></a>Choosing the blog platform</h2><p>Every time that I try to stat bloggin I always get stuck on the building the blog effort. I think I honestly started a least 4 blogs and stopped just on the fact that I havent choosen the blog engine. I passed to the most diferent kind of blogs. I used <a href=\"https://wordpress.com/\" target=\"_blank\" rel=\"noopener\">Wordpress</a> <a href=\"\">jerkyll</a> among others.</p>\n<p>One thing that I had certain it was that I wanted something that would be using <a href=\"\">markdown</a>. There has been some time that I have been using markdown to take all my notes and I got really confortable with it, it remembers me a bit the times of Uni and using <a href=\"\">Tex</a> but only much simples to write.</p>\n<p>With this recomendation I asked <a href=\"blog.bencoleman.co.uk\">Ben</a> which blog engine he was using and he introduced me to  <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>, It is awesome and I honestly can’t recomend it highly enough. It has been working really well for me and if you like markdown I honestly suggest you to go for it to. not only that but you can do most of the things from the command line with the <a href=\"https://www.npmjs.com/package/hexo-cli\" target=\"_blank\" rel=\"noopener\">hexo-cli</a>.</p>\n"},{"title":"Microsoft, A company of engineers?","_content":"\n## My background with Microsoft\n\nWhen I joined Microsoft I had some things that were certain to me that were not to others.\n\nI am not old enough to have a strong recollection of Microsoft from the Bill Gates era, I saw a lot of his legacy, but never saw he actually working for Microsoft what doesn't make me admire him due to the whole time that I have seen him in the foundation and through all the histories that I have heard from him, but my first impression from Microsoft comes from Steve Balmer.\n\nI was never a big fan of sales or advertising I always believe on the saying\n\n> Build and they will come.\n\nCame as a surprise from me to see that Balmer was this sales guy because from the time that Balmer was heading Microsoft I remember two things clear in my mind, and both of them come from external conferences where he was speaking.\n\nThe first thing that I remember he said was: [Developers, Developers, Developers!](https://youtu.be/Vhh_GeBPOhs) This mantra that becomes a meme on the internet years later was for me in my early years of programming what would define Microsoft. I am a developer and Microsoft cares about me, they also do software so there was this empathy that I felt for the company. I thought Microsoft it is one of the largest companies in the word and it a company about developers I assumed that was a company of developers internally and externally.\n![Developers Developers Developers](https://media.giphy.com/media/enTimXqzmVXR6/giphy.gif)\n\nThe second thing that I remember Balmer saying actually became a meme too, years later, I remember he coming to the stage jumping up and down, coming to the microphone and saying: [I love this Company!](https://youtu.be/f__n8084YAE?t=13) that was it for me there was no better way for me to identify with a company, I saw a company that was not only about developers but about passion about passionate developers. That was exactly what I am someone that gets excited about building things about empowering people.\n![I did not read](https://media.giphy.com/media/11kAylFEh8STRu/giphy.gif)\n\n## Being a technical evangelist\n\nI joined Microsoft as a technical evangelist. At first look, this title doesn't mean much but when you start to think about it, it actually joins the two things that I was first attracted to Microsoft because of. I would be still Technical and I would be passionate about it, the work I assumed was to get people passionate about Microsoft as I am. When there were the restructuring and my team was put under OCP on the Build-with Motion. I thought: \"This is great it is exactly what I do a tech guy building with others\".\n\nHow could I be so wrong? I forget to check which part of the organization I was under, I was under sales and marketing, and apparently being under sales and marketing has a much greater influence that being in the build with motion or being in a software company. When the things start to be more about having a good relationship more than having a good product, I can't see how this relates to our Mission to: [\"Empower every person and every organization on the planet to achieve more.\"](https://www.microsoft.com/en-us/about) I strongly believe in makers and those makers that actually push the world forward.\n\nToday I find incongruous that we are the tech team in a build with motion focus on people that build software and we do not expect to be coders.\n\nOf course, I find important that you should be able to draw an architecture diagram or to explain how to communicate with our products, and even how to reach out to people that would be able to help you, in the end, coding is a social activity. and building a product it is an even more social activity. If you are in the build with motion you should know how to build.\n\nMore than knowing how to build it is important to get excited about it. It is really easy to get excited about a finished product and many people do but I think it is important to be excited about the building process and if you are building software you need to be exciting about coding and about using technology and about the code that someone else wrote. You need to know how to get your hands dirty if you need too. \n\nIf you can do that how are you going to be passing confidence, how are you going to be asking someone to be building with you if you are not excited about the building processes if you are not excited about the chance of you making things?\n\nIf you are in a rocket company it is not enough to love to see the rockets flying and going to space, you need to be passionate about how the combustion chamber works, get excited about a new closed combustion cycle that can speed fuel intake.\n\nThere is one anecdote that I like:\n\n> let's say that you have 2 aeroplane manufacturer one that has mathematical tests and profs to be a strict part of the engineering and manufacturing part of each new aeroplane and strict check it, the other it is not that strict but all the engineers fly with the aeroplane on the first test flight. Which one would you feel more secure to fly in?\n![Plane fail](https://media.giphy.com/media/EUHqQ8qQXl1Je/giphy.gif)\n\nThis explains a lot for me about the work that I thought was expected from a TE, it is about believing in the tools it is about have been using them it is about being able to put yourself on the developer sit. It is also about being able to put yourself on the CTO sit and even the CEO sit.\n\n![Matrix](https://media.giphy.com/media/zXmbOaTpbY6mA/giphy.gif)\n\n\nI love Satia and the work that he is doing and I think that he is taking Microsoft in the right direction transforming the company on being a company even more focused on engineering and he has been showing that day after day.\n\nThen when I think about building with partners that are building software I can't stop thinking: Developers, Developers, Developers!","source":"_drafts/rant-about-ms.md","raw":"---\ntitle: Microsoft, A company of engineers?\n---\n\n## My background with Microsoft\n\nWhen I joined Microsoft I had some things that were certain to me that were not to others.\n\nI am not old enough to have a strong recollection of Microsoft from the Bill Gates era, I saw a lot of his legacy, but never saw he actually working for Microsoft what doesn't make me admire him due to the whole time that I have seen him in the foundation and through all the histories that I have heard from him, but my first impression from Microsoft comes from Steve Balmer.\n\nI was never a big fan of sales or advertising I always believe on the saying\n\n> Build and they will come.\n\nCame as a surprise from me to see that Balmer was this sales guy because from the time that Balmer was heading Microsoft I remember two things clear in my mind, and both of them come from external conferences where he was speaking.\n\nThe first thing that I remember he said was: [Developers, Developers, Developers!](https://youtu.be/Vhh_GeBPOhs) This mantra that becomes a meme on the internet years later was for me in my early years of programming what would define Microsoft. I am a developer and Microsoft cares about me, they also do software so there was this empathy that I felt for the company. I thought Microsoft it is one of the largest companies in the word and it a company about developers I assumed that was a company of developers internally and externally.\n![Developers Developers Developers](https://media.giphy.com/media/enTimXqzmVXR6/giphy.gif)\n\nThe second thing that I remember Balmer saying actually became a meme too, years later, I remember he coming to the stage jumping up and down, coming to the microphone and saying: [I love this Company!](https://youtu.be/f__n8084YAE?t=13) that was it for me there was no better way for me to identify with a company, I saw a company that was not only about developers but about passion about passionate developers. That was exactly what I am someone that gets excited about building things about empowering people.\n![I did not read](https://media.giphy.com/media/11kAylFEh8STRu/giphy.gif)\n\n## Being a technical evangelist\n\nI joined Microsoft as a technical evangelist. At first look, this title doesn't mean much but when you start to think about it, it actually joins the two things that I was first attracted to Microsoft because of. I would be still Technical and I would be passionate about it, the work I assumed was to get people passionate about Microsoft as I am. When there were the restructuring and my team was put under OCP on the Build-with Motion. I thought: \"This is great it is exactly what I do a tech guy building with others\".\n\nHow could I be so wrong? I forget to check which part of the organization I was under, I was under sales and marketing, and apparently being under sales and marketing has a much greater influence that being in the build with motion or being in a software company. When the things start to be more about having a good relationship more than having a good product, I can't see how this relates to our Mission to: [\"Empower every person and every organization on the planet to achieve more.\"](https://www.microsoft.com/en-us/about) I strongly believe in makers and those makers that actually push the world forward.\n\nToday I find incongruous that we are the tech team in a build with motion focus on people that build software and we do not expect to be coders.\n\nOf course, I find important that you should be able to draw an architecture diagram or to explain how to communicate with our products, and even how to reach out to people that would be able to help you, in the end, coding is a social activity. and building a product it is an even more social activity. If you are in the build with motion you should know how to build.\n\nMore than knowing how to build it is important to get excited about it. It is really easy to get excited about a finished product and many people do but I think it is important to be excited about the building process and if you are building software you need to be exciting about coding and about using technology and about the code that someone else wrote. You need to know how to get your hands dirty if you need too. \n\nIf you can do that how are you going to be passing confidence, how are you going to be asking someone to be building with you if you are not excited about the building processes if you are not excited about the chance of you making things?\n\nIf you are in a rocket company it is not enough to love to see the rockets flying and going to space, you need to be passionate about how the combustion chamber works, get excited about a new closed combustion cycle that can speed fuel intake.\n\nThere is one anecdote that I like:\n\n> let's say that you have 2 aeroplane manufacturer one that has mathematical tests and profs to be a strict part of the engineering and manufacturing part of each new aeroplane and strict check it, the other it is not that strict but all the engineers fly with the aeroplane on the first test flight. Which one would you feel more secure to fly in?\n![Plane fail](https://media.giphy.com/media/EUHqQ8qQXl1Je/giphy.gif)\n\nThis explains a lot for me about the work that I thought was expected from a TE, it is about believing in the tools it is about have been using them it is about being able to put yourself on the developer sit. It is also about being able to put yourself on the CTO sit and even the CEO sit.\n\n![Matrix](https://media.giphy.com/media/zXmbOaTpbY6mA/giphy.gif)\n\n\nI love Satia and the work that he is doing and I think that he is taking Microsoft in the right direction transforming the company on being a company even more focused on engineering and he has been showing that day after day.\n\nThen when I think about building with partners that are building software I can't stop thinking: Developers, Developers, Developers!","slug":"rant-about-ms","published":0,"date":"2018-07-08T06:21:51.321Z","updated":"2018-07-08T06:21:51.321Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjck5mna0001ecmr540soanq","content":"<h2 id=\"My-background-with-Microsoft\"><a href=\"#My-background-with-Microsoft\" class=\"headerlink\" title=\"My background with Microsoft\"></a>My background with Microsoft</h2><p>When I joined Microsoft I had some things that were certain to me that were not to others.</p>\n<p>I am not old enough to have a strong recollection of Microsoft from the Bill Gates era, I saw a lot of his legacy, but never saw he actually working for Microsoft what doesn’t make me admire him due to the whole time that I have seen him in the foundation and through all the histories that I have heard from him, but my first impression from Microsoft comes from Steve Balmer.</p>\n<p>I was never a big fan of sales or advertising I always believe on the saying</p>\n<blockquote>\n<p>Build and they will come.</p>\n</blockquote>\n<p>Came as a surprise from me to see that Balmer was this sales guy because from the time that Balmer was heading Microsoft I remember two things clear in my mind, and both of them come from external conferences where he was speaking.</p>\n<p>The first thing that I remember he said was: <a href=\"https://youtu.be/Vhh_GeBPOhs\" target=\"_blank\" rel=\"noopener\">Developers, Developers, Developers!</a> This mantra that becomes a meme on the internet years later was for me in my early years of programming what would define Microsoft. I am a developer and Microsoft cares about me, they also do software so there was this empathy that I felt for the company. I thought Microsoft it is one of the largest companies in the word and it a company about developers I assumed that was a company of developers internally and externally.<br><img src=\"https://media.giphy.com/media/enTimXqzmVXR6/giphy.gif\" alt=\"Developers Developers Developers\"></p>\n<p>The second thing that I remember Balmer saying actually became a meme too, years later, I remember he coming to the stage jumping up and down, coming to the microphone and saying: <a href=\"https://youtu.be/f__n8084YAE?t=13\" target=\"_blank\" rel=\"noopener\">I love this Company!</a> that was it for me there was no better way for me to identify with a company, I saw a company that was not only about developers but about passion about passionate developers. That was exactly what I am someone that gets excited about building things about empowering people.<br><img src=\"https://media.giphy.com/media/11kAylFEh8STRu/giphy.gif\" alt=\"I did not read\"></p>\n<h2 id=\"Being-a-technical-evangelist\"><a href=\"#Being-a-technical-evangelist\" class=\"headerlink\" title=\"Being a technical evangelist\"></a>Being a technical evangelist</h2><p>I joined Microsoft as a technical evangelist. At first look, this title doesn’t mean much but when you start to think about it, it actually joins the two things that I was first attracted to Microsoft because of. I would be still Technical and I would be passionate about it, the work I assumed was to get people passionate about Microsoft as I am. When there were the restructuring and my team was put under OCP on the Build-with Motion. I thought: “This is great it is exactly what I do a tech guy building with others”.</p>\n<p>How could I be so wrong? I forget to check which part of the organization I was under, I was under sales and marketing, and apparently being under sales and marketing has a much greater influence that being in the build with motion or being in a software company. When the things start to be more about having a good relationship more than having a good product, I can’t see how this relates to our Mission to: <a href=\"https://www.microsoft.com/en-us/about\" target=\"_blank\" rel=\"noopener\">“Empower every person and every organization on the planet to achieve more.”</a> I strongly believe in makers and those makers that actually push the world forward.</p>\n<p>Today I find incongruous that we are the tech team in a build with motion focus on people that build software and we do not expect to be coders.</p>\n<p>Of course, I find important that you should be able to draw an architecture diagram or to explain how to communicate with our products, and even how to reach out to people that would be able to help you, in the end, coding is a social activity. and building a product it is an even more social activity. If you are in the build with motion you should know how to build.</p>\n<p>More than knowing how to build it is important to get excited about it. It is really easy to get excited about a finished product and many people do but I think it is important to be excited about the building process and if you are building software you need to be exciting about coding and about using technology and about the code that someone else wrote. You need to know how to get your hands dirty if you need too. </p>\n<p>If you can do that how are you going to be passing confidence, how are you going to be asking someone to be building with you if you are not excited about the building processes if you are not excited about the chance of you making things?</p>\n<p>If you are in a rocket company it is not enough to love to see the rockets flying and going to space, you need to be passionate about how the combustion chamber works, get excited about a new closed combustion cycle that can speed fuel intake.</p>\n<p>There is one anecdote that I like:</p>\n<blockquote>\n<p>let’s say that you have 2 aeroplane manufacturer one that has mathematical tests and profs to be a strict part of the engineering and manufacturing part of each new aeroplane and strict check it, the other it is not that strict but all the engineers fly with the aeroplane on the first test flight. Which one would you feel more secure to fly in?<br><img src=\"https://media.giphy.com/media/EUHqQ8qQXl1Je/giphy.gif\" alt=\"Plane fail\"></p>\n</blockquote>\n<p>This explains a lot for me about the work that I thought was expected from a TE, it is about believing in the tools it is about have been using them it is about being able to put yourself on the developer sit. It is also about being able to put yourself on the CTO sit and even the CEO sit.</p>\n<p><img src=\"https://media.giphy.com/media/zXmbOaTpbY6mA/giphy.gif\" alt=\"Matrix\"></p>\n<p>I love Satia and the work that he is doing and I think that he is taking Microsoft in the right direction transforming the company on being a company even more focused on engineering and he has been showing that day after day.</p>\n<p>Then when I think about building with partners that are building software I can’t stop thinking: Developers, Developers, Developers!</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"My-background-with-Microsoft\"><a href=\"#My-background-with-Microsoft\" class=\"headerlink\" title=\"My background with Microsoft\"></a>My background with Microsoft</h2><p>When I joined Microsoft I had some things that were certain to me that were not to others.</p>\n<p>I am not old enough to have a strong recollection of Microsoft from the Bill Gates era, I saw a lot of his legacy, but never saw he actually working for Microsoft what doesn’t make me admire him due to the whole time that I have seen him in the foundation and through all the histories that I have heard from him, but my first impression from Microsoft comes from Steve Balmer.</p>\n<p>I was never a big fan of sales or advertising I always believe on the saying</p>\n<blockquote>\n<p>Build and they will come.</p>\n</blockquote>\n<p>Came as a surprise from me to see that Balmer was this sales guy because from the time that Balmer was heading Microsoft I remember two things clear in my mind, and both of them come from external conferences where he was speaking.</p>\n<p>The first thing that I remember he said was: <a href=\"https://youtu.be/Vhh_GeBPOhs\" target=\"_blank\" rel=\"noopener\">Developers, Developers, Developers!</a> This mantra that becomes a meme on the internet years later was for me in my early years of programming what would define Microsoft. I am a developer and Microsoft cares about me, they also do software so there was this empathy that I felt for the company. I thought Microsoft it is one of the largest companies in the word and it a company about developers I assumed that was a company of developers internally and externally.<br><img src=\"https://media.giphy.com/media/enTimXqzmVXR6/giphy.gif\" alt=\"Developers Developers Developers\"></p>\n<p>The second thing that I remember Balmer saying actually became a meme too, years later, I remember he coming to the stage jumping up and down, coming to the microphone and saying: <a href=\"https://youtu.be/f__n8084YAE?t=13\" target=\"_blank\" rel=\"noopener\">I love this Company!</a> that was it for me there was no better way for me to identify with a company, I saw a company that was not only about developers but about passion about passionate developers. That was exactly what I am someone that gets excited about building things about empowering people.<br><img src=\"https://media.giphy.com/media/11kAylFEh8STRu/giphy.gif\" alt=\"I did not read\"></p>\n<h2 id=\"Being-a-technical-evangelist\"><a href=\"#Being-a-technical-evangelist\" class=\"headerlink\" title=\"Being a technical evangelist\"></a>Being a technical evangelist</h2><p>I joined Microsoft as a technical evangelist. At first look, this title doesn’t mean much but when you start to think about it, it actually joins the two things that I was first attracted to Microsoft because of. I would be still Technical and I would be passionate about it, the work I assumed was to get people passionate about Microsoft as I am. When there were the restructuring and my team was put under OCP on the Build-with Motion. I thought: “This is great it is exactly what I do a tech guy building with others”.</p>\n<p>How could I be so wrong? I forget to check which part of the organization I was under, I was under sales and marketing, and apparently being under sales and marketing has a much greater influence that being in the build with motion or being in a software company. When the things start to be more about having a good relationship more than having a good product, I can’t see how this relates to our Mission to: <a href=\"https://www.microsoft.com/en-us/about\" target=\"_blank\" rel=\"noopener\">“Empower every person and every organization on the planet to achieve more.”</a> I strongly believe in makers and those makers that actually push the world forward.</p>\n<p>Today I find incongruous that we are the tech team in a build with motion focus on people that build software and we do not expect to be coders.</p>\n<p>Of course, I find important that you should be able to draw an architecture diagram or to explain how to communicate with our products, and even how to reach out to people that would be able to help you, in the end, coding is a social activity. and building a product it is an even more social activity. If you are in the build with motion you should know how to build.</p>\n<p>More than knowing how to build it is important to get excited about it. It is really easy to get excited about a finished product and many people do but I think it is important to be excited about the building process and if you are building software you need to be exciting about coding and about using technology and about the code that someone else wrote. You need to know how to get your hands dirty if you need too. </p>\n<p>If you can do that how are you going to be passing confidence, how are you going to be asking someone to be building with you if you are not excited about the building processes if you are not excited about the chance of you making things?</p>\n<p>If you are in a rocket company it is not enough to love to see the rockets flying and going to space, you need to be passionate about how the combustion chamber works, get excited about a new closed combustion cycle that can speed fuel intake.</p>\n<p>There is one anecdote that I like:</p>\n<blockquote>\n<p>let’s say that you have 2 aeroplane manufacturer one that has mathematical tests and profs to be a strict part of the engineering and manufacturing part of each new aeroplane and strict check it, the other it is not that strict but all the engineers fly with the aeroplane on the first test flight. Which one would you feel more secure to fly in?<br><img src=\"https://media.giphy.com/media/EUHqQ8qQXl1Je/giphy.gif\" alt=\"Plane fail\"></p>\n</blockquote>\n<p>This explains a lot for me about the work that I thought was expected from a TE, it is about believing in the tools it is about have been using them it is about being able to put yourself on the developer sit. It is also about being able to put yourself on the CTO sit and even the CEO sit.</p>\n<p><img src=\"https://media.giphy.com/media/zXmbOaTpbY6mA/giphy.gif\" alt=\"Matrix\"></p>\n<p>I love Satia and the work that he is doing and I think that he is taking Microsoft in the right direction transforming the company on being a company even more focused on engineering and he has been showing that day after day.</p>\n<p>Then when I think about building with partners that are building software I can’t stop thinking: Developers, Developers, Developers!</p>\n"},{"title":"Installing govendor on windows","date":"2018-02-26T01:01:01.000Z","_content":"\nIf you are using go ans specially if you come from a .Net background you might be missing a tool like [Nuget](https://www.nuget.org/) of course `go get` solves a lot of those problems but you might be missing some configuration and control on top of that. [Govendor](https://github.com/kardianos/govendor) helps you to do that. You can check how to use govendor [here](https://zerokspot.com/weblog/2017/04/23/getting-started-with-govendor/)\n\nThis are the instructions to install in case you are using windows.\n\n<!-- more -->\n\nMake sure your go binaries are in the path.\nYou should have `<GOPATH>/bin` you your windows `PATH` instructions on how to install go easy on windows can be found [here](http://www.wadewegner.com/2014/12/easy-go-programming-setup-for-windows/).\n\nOn any shell with access to go (powershell or cmd for example)\n\nGet govendor\n\n```shell\ngo get -u github.com/kardianos/govendor\n```\n\nInstall govendor\n\n```shell\ngo install github.com/kardianos/govendor\n```\n\nAfter that you should be able to check which version you are using from govendor using:\n\n```shell\ngovendor --version\n```\n\nnow you just need to use in your go projects\n\n```shell\ngovendor init\n```\n\nand for the dependencies that you want to add\n\n```shell\ngovendor fetch <Your-Dependency>\n```\n\n(this info was based on my experience and on [this answer in stack overflow](https://stackoverflow.com/a/42170134))","source":"_posts/govendor-on-windows.md","raw":"---\ntitle: Installing govendor on windows\ndate: 2018/02/26 01:01:01\n---\n\nIf you are using go ans specially if you come from a .Net background you might be missing a tool like [Nuget](https://www.nuget.org/) of course `go get` solves a lot of those problems but you might be missing some configuration and control on top of that. [Govendor](https://github.com/kardianos/govendor) helps you to do that. You can check how to use govendor [here](https://zerokspot.com/weblog/2017/04/23/getting-started-with-govendor/)\n\nThis are the instructions to install in case you are using windows.\n\n<!-- more -->\n\nMake sure your go binaries are in the path.\nYou should have `<GOPATH>/bin` you your windows `PATH` instructions on how to install go easy on windows can be found [here](http://www.wadewegner.com/2014/12/easy-go-programming-setup-for-windows/).\n\nOn any shell with access to go (powershell or cmd for example)\n\nGet govendor\n\n```shell\ngo get -u github.com/kardianos/govendor\n```\n\nInstall govendor\n\n```shell\ngo install github.com/kardianos/govendor\n```\n\nAfter that you should be able to check which version you are using from govendor using:\n\n```shell\ngovendor --version\n```\n\nnow you just need to use in your go projects\n\n```shell\ngovendor init\n```\n\nand for the dependencies that you want to add\n\n```shell\ngovendor fetch <Your-Dependency>\n```\n\n(this info was based on my experience and on [this answer in stack overflow](https://stackoverflow.com/a/42170134))","slug":"govendor-on-windows","published":1,"updated":"2018-07-08T06:21:51.322Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjck5mnc0002ecmrdhhmmy3x","content":"<p>If you are using go ans specially if you come from a .Net background you might be missing a tool like <a href=\"https://www.nuget.org/\" target=\"_blank\" rel=\"noopener\">Nuget</a> of course <code>go get</code> solves a lot of those problems but you might be missing some configuration and control on top of that. <a href=\"https://github.com/kardianos/govendor\" target=\"_blank\" rel=\"noopener\">Govendor</a> helps you to do that. You can check how to use govendor <a href=\"https://zerokspot.com/weblog/2017/04/23/getting-started-with-govendor/\" target=\"_blank\" rel=\"noopener\">here</a></p>\n<p>This are the instructions to install in case you are using windows.</p>\n<a id=\"more\"></a>\n<p>Make sure your go binaries are in the path.<br>You should have <code>&lt;GOPATH&gt;/bin</code> you your windows <code>PATH</code> instructions on how to install go easy on windows can be found <a href=\"http://www.wadewegner.com/2014/12/easy-go-programming-setup-for-windows/\" target=\"_blank\" rel=\"noopener\">here</a>.</p>\n<p>On any shell with access to go (powershell or cmd for example)</p>\n<p>Get govendor</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get -u github.com/kardianos/govendor</span><br></pre></td></tr></table></figure>\n<p>Install govendor</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go install github.com/kardianos/govendor</span><br></pre></td></tr></table></figure>\n<p>After that you should be able to check which version you are using from govendor using:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">govendor --version</span><br></pre></td></tr></table></figure>\n<p>now you just need to use in your go projects</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">govendor init</span><br></pre></td></tr></table></figure>\n<p>and for the dependencies that you want to add</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">govendor fetch &lt;Your-Dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>(this info was based on my experience and on <a href=\"https://stackoverflow.com/a/42170134\" target=\"_blank\" rel=\"noopener\">this answer in stack overflow</a>)</p>\n","site":{"data":{}},"excerpt":"<p>If you are using go ans specially if you come from a .Net background you might be missing a tool like <a href=\"https://www.nuget.org/\" target=\"_blank\" rel=\"noopener\">Nuget</a> of course <code>go get</code> solves a lot of those problems but you might be missing some configuration and control on top of that. <a href=\"https://github.com/kardianos/govendor\" target=\"_blank\" rel=\"noopener\">Govendor</a> helps you to do that. You can check how to use govendor <a href=\"https://zerokspot.com/weblog/2017/04/23/getting-started-with-govendor/\" target=\"_blank\" rel=\"noopener\">here</a></p>\n<p>This are the instructions to install in case you are using windows.</p>","more":"<p>Make sure your go binaries are in the path.<br>You should have <code>&lt;GOPATH&gt;/bin</code> you your windows <code>PATH</code> instructions on how to install go easy on windows can be found <a href=\"http://www.wadewegner.com/2014/12/easy-go-programming-setup-for-windows/\" target=\"_blank\" rel=\"noopener\">here</a>.</p>\n<p>On any shell with access to go (powershell or cmd for example)</p>\n<p>Get govendor</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get -u github.com/kardianos/govendor</span><br></pre></td></tr></table></figure>\n<p>Install govendor</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go install github.com/kardianos/govendor</span><br></pre></td></tr></table></figure>\n<p>After that you should be able to check which version you are using from govendor using:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">govendor --version</span><br></pre></td></tr></table></figure>\n<p>now you just need to use in your go projects</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">govendor init</span><br></pre></td></tr></table></figure>\n<p>and for the dependencies that you want to add</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">govendor fetch &lt;Your-Dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>(this info was based on my experience and on <a href=\"https://stackoverflow.com/a/42170134\" target=\"_blank\" rel=\"noopener\">this answer in stack overflow</a>)</p>"},{"title":"Imutable data retention pipeline","_content":"\n## Retention goal\n\nThe idea it is really simple you want to refgister dome long term data based on a data retention pipeline, some of the requremns can make it a bit trickier you want it not to be updated what means that you want this data to be read only and at the same time you want to be able to query this data.\n\nThere are plenty of solutuions that would do that but I wanted somethin that not only could do that but that could do that and do it cheap and retain data for years at least 5.\n\n## The basic architecture\n\nThe basic architecture fot thsi data retention it is really simple.\n\nYou start wiht a data ingestion queue. just some place where you could send this data easialy from many diferent data sources.\n\nThis data source needs to write to a readonly storage that will keep this data content.\n\nThe third mechanism would be a query engine that wouyld read this data index it and allow me to query it.\n\n## Building blocks\n\nTo put togethert building blocks for that it is not that hard.\n\n>Disclaimer here that I currently work for microsoft and directly with Azure\n\nThe cloud it is there to give you some option on how to do it.\n\nto our data ingestion I will be using azure event hubs. It is a really secure data queue that scale really well and it is dirty cheap. can handle over 100.000 log events per day costing me [Insert here vent hubs price]()\n\nFor the data store I will be using azure data lake, azure data lake lets you restric the access to the data but more than that it also allows you to audit who access that data when. This will be really usefull when we talk later about how can we monitor and check who is actually reading this data.\n\nTo connect the data ingestion and the data lake we will just use the capture feature from event hubs. You need to follow some manual steps to connect this right now but this shpould become fairly easy on the comming days. You can check on my post [Using azure data lake for event hubs capture]() how I did automate that.\n\nTo to the index I will use auzre search for quick indexing the data and azure data lake for analytics and exploration queries on that data.\n\n## Talk it is cheap show me the code\n\n### 1. The generator\n\nThe code for the data generator irt is quite simple I will be simulating some scenatriosn that are fairly common.\n\nI just wrote a basic .net core console app to generate this code (even after all those years and languages c# still being my language of choice).\n\n```\n```\n\nThe important part to notice it is that I have some fixed fields on my events `_s` (the event session) `_t` (the event type) those are fields that would be required in every log that I record from the application. Lets talk a little bit about event logging: the idea of creating a whole data lake for your event or logs it is to try to aggregate as much data about your system that you can. in order to do that you need to be flexible in your data schema, but at the same time you want to have some consistency between diferent entries in yuor system. the easiest way that I found so far to achieve that it is to use the namespace schema with version for event types.\n\nBasically the idea it ia that all the events that you registry must have a type, and this type must have a namespace. the namespace should be managed on the coorporation level, to guarantee consistency, means that a new team will not come up with a namespace that it is currently in use by another team. a typical type for the event would include `{namespace}.{application}.{event_type}.{version}` I had some long discussion on should I put application before event_type or event type befor application I found out that you are mostly looking for information inside a given application or set of applications so I normally include it first. important to notive here that this is just one suggestion. the only golden rule here it is that events of the same time will follow the same schema ant that it is where the most important part of the event type it is the `{version}` in the end, the idea it is simple. Every time that you change how you capture a propertie you must change at least the version of the event.\n\n\n\n\nI am now collecting data if you are trying to implement this in your organization I will always tell you to rush this part as fastas you can. you can always go back and fix other mistakes you can not go back in time and collect data that it is not there anymore.\n\n","source":"_drafts/Imutable-data-retention-pipeline.md","raw":"---\ntitle: Imutable data retention pipeline\ntags:\n---\n\n## Retention goal\n\nThe idea it is really simple you want to refgister dome long term data based on a data retention pipeline, some of the requremns can make it a bit trickier you want it not to be updated what means that you want this data to be read only and at the same time you want to be able to query this data.\n\nThere are plenty of solutuions that would do that but I wanted somethin that not only could do that but that could do that and do it cheap and retain data for years at least 5.\n\n## The basic architecture\n\nThe basic architecture fot thsi data retention it is really simple.\n\nYou start wiht a data ingestion queue. just some place where you could send this data easialy from many diferent data sources.\n\nThis data source needs to write to a readonly storage that will keep this data content.\n\nThe third mechanism would be a query engine that wouyld read this data index it and allow me to query it.\n\n## Building blocks\n\nTo put togethert building blocks for that it is not that hard.\n\n>Disclaimer here that I currently work for microsoft and directly with Azure\n\nThe cloud it is there to give you some option on how to do it.\n\nto our data ingestion I will be using azure event hubs. It is a really secure data queue that scale really well and it is dirty cheap. can handle over 100.000 log events per day costing me [Insert here vent hubs price]()\n\nFor the data store I will be using azure data lake, azure data lake lets you restric the access to the data but more than that it also allows you to audit who access that data when. This will be really usefull when we talk later about how can we monitor and check who is actually reading this data.\n\nTo connect the data ingestion and the data lake we will just use the capture feature from event hubs. You need to follow some manual steps to connect this right now but this shpould become fairly easy on the comming days. You can check on my post [Using azure data lake for event hubs capture]() how I did automate that.\n\nTo to the index I will use auzre search for quick indexing the data and azure data lake for analytics and exploration queries on that data.\n\n## Talk it is cheap show me the code\n\n### 1. The generator\n\nThe code for the data generator irt is quite simple I will be simulating some scenatriosn that are fairly common.\n\nI just wrote a basic .net core console app to generate this code (even after all those years and languages c# still being my language of choice).\n\n```\n```\n\nThe important part to notice it is that I have some fixed fields on my events `_s` (the event session) `_t` (the event type) those are fields that would be required in every log that I record from the application. Lets talk a little bit about event logging: the idea of creating a whole data lake for your event or logs it is to try to aggregate as much data about your system that you can. in order to do that you need to be flexible in your data schema, but at the same time you want to have some consistency between diferent entries in yuor system. the easiest way that I found so far to achieve that it is to use the namespace schema with version for event types.\n\nBasically the idea it ia that all the events that you registry must have a type, and this type must have a namespace. the namespace should be managed on the coorporation level, to guarantee consistency, means that a new team will not come up with a namespace that it is currently in use by another team. a typical type for the event would include `{namespace}.{application}.{event_type}.{version}` I had some long discussion on should I put application before event_type or event type befor application I found out that you are mostly looking for information inside a given application or set of applications so I normally include it first. important to notive here that this is just one suggestion. the only golden rule here it is that events of the same time will follow the same schema ant that it is where the most important part of the event type it is the `{version}` in the end, the idea it is simple. Every time that you change how you capture a propertie you must change at least the version of the event.\n\n\n\n\nI am now collecting data if you are trying to implement this in your organization I will always tell you to rush this part as fastas you can. you can always go back and fix other mistakes you can not go back in time and collect data that it is not there anymore.\n\n","slug":"Imutable-data-retention-pipeline","published":0,"date":"2018-07-08T06:21:51.320Z","updated":"2018-07-08T06:21:51.320Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjck5mnd0003ecmrte4137nh","content":"<h2 id=\"Retention-goal\"><a href=\"#Retention-goal\" class=\"headerlink\" title=\"Retention goal\"></a>Retention goal</h2><p>The idea it is really simple you want to refgister dome long term data based on a data retention pipeline, some of the requremns can make it a bit trickier you want it not to be updated what means that you want this data to be read only and at the same time you want to be able to query this data.</p>\n<p>There are plenty of solutuions that would do that but I wanted somethin that not only could do that but that could do that and do it cheap and retain data for years at least 5.</p>\n<h2 id=\"The-basic-architecture\"><a href=\"#The-basic-architecture\" class=\"headerlink\" title=\"The basic architecture\"></a>The basic architecture</h2><p>The basic architecture fot thsi data retention it is really simple.</p>\n<p>You start wiht a data ingestion queue. just some place where you could send this data easialy from many diferent data sources.</p>\n<p>This data source needs to write to a readonly storage that will keep this data content.</p>\n<p>The third mechanism would be a query engine that wouyld read this data index it and allow me to query it.</p>\n<h2 id=\"Building-blocks\"><a href=\"#Building-blocks\" class=\"headerlink\" title=\"Building blocks\"></a>Building blocks</h2><p>To put togethert building blocks for that it is not that hard.</p>\n<blockquote>\n<p>Disclaimer here that I currently work for microsoft and directly with Azure</p>\n</blockquote>\n<p>The cloud it is there to give you some option on how to do it.</p>\n<p>to our data ingestion I will be using azure event hubs. It is a really secure data queue that scale really well and it is dirty cheap. can handle over 100.000 log events per day costing me <a href=\"\">Insert here vent hubs price</a></p>\n<p>For the data store I will be using azure data lake, azure data lake lets you restric the access to the data but more than that it also allows you to audit who access that data when. This will be really usefull when we talk later about how can we monitor and check who is actually reading this data.</p>\n<p>To connect the data ingestion and the data lake we will just use the capture feature from event hubs. You need to follow some manual steps to connect this right now but this shpould become fairly easy on the comming days. You can check on my post <a href=\"\">Using azure data lake for event hubs capture</a> how I did automate that.</p>\n<p>To to the index I will use auzre search for quick indexing the data and azure data lake for analytics and exploration queries on that data.</p>\n<h2 id=\"Talk-it-is-cheap-show-me-the-code\"><a href=\"#Talk-it-is-cheap-show-me-the-code\" class=\"headerlink\" title=\"Talk it is cheap show me the code\"></a>Talk it is cheap show me the code</h2><h3 id=\"1-The-generator\"><a href=\"#1-The-generator\" class=\"headerlink\" title=\"1. The generator\"></a>1. The generator</h3><p>The code for the data generator irt is quite simple I will be simulating some scenatriosn that are fairly common.</p>\n<p>I just wrote a basic .net core console app to generate this code (even after all those years and languages c# still being my language of choice).</p>\n<pre><code>\n</code></pre><p>The important part to notice it is that I have some fixed fields on my events <code>_s</code> (the event session) <code>_t</code> (the event type) those are fields that would be required in every log that I record from the application. Lets talk a little bit about event logging: the idea of creating a whole data lake for your event or logs it is to try to aggregate as much data about your system that you can. in order to do that you need to be flexible in your data schema, but at the same time you want to have some consistency between diferent entries in yuor system. the easiest way that I found so far to achieve that it is to use the namespace schema with version for event types.</p>\n<p>Basically the idea it ia that all the events that you registry must have a type, and this type must have a namespace. the namespace should be managed on the coorporation level, to guarantee consistency, means that a new team will not come up with a namespace that it is currently in use by another team. a typical type for the event would include <code>{namespace}.{application}.{event_type}.{version}</code> I had some long discussion on should I put application before event_type or event type befor application I found out that you are mostly looking for information inside a given application or set of applications so I normally include it first. important to notive here that this is just one suggestion. the only golden rule here it is that events of the same time will follow the same schema ant that it is where the most important part of the event type it is the <code>{version}</code> in the end, the idea it is simple. Every time that you change how you capture a propertie you must change at least the version of the event.</p>\n<p>I am now collecting data if you are trying to implement this in your organization I will always tell you to rush this part as fastas you can. you can always go back and fix other mistakes you can not go back in time and collect data that it is not there anymore.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Retention-goal\"><a href=\"#Retention-goal\" class=\"headerlink\" title=\"Retention goal\"></a>Retention goal</h2><p>The idea it is really simple you want to refgister dome long term data based on a data retention pipeline, some of the requremns can make it a bit trickier you want it not to be updated what means that you want this data to be read only and at the same time you want to be able to query this data.</p>\n<p>There are plenty of solutuions that would do that but I wanted somethin that not only could do that but that could do that and do it cheap and retain data for years at least 5.</p>\n<h2 id=\"The-basic-architecture\"><a href=\"#The-basic-architecture\" class=\"headerlink\" title=\"The basic architecture\"></a>The basic architecture</h2><p>The basic architecture fot thsi data retention it is really simple.</p>\n<p>You start wiht a data ingestion queue. just some place where you could send this data easialy from many diferent data sources.</p>\n<p>This data source needs to write to a readonly storage that will keep this data content.</p>\n<p>The third mechanism would be a query engine that wouyld read this data index it and allow me to query it.</p>\n<h2 id=\"Building-blocks\"><a href=\"#Building-blocks\" class=\"headerlink\" title=\"Building blocks\"></a>Building blocks</h2><p>To put togethert building blocks for that it is not that hard.</p>\n<blockquote>\n<p>Disclaimer here that I currently work for microsoft and directly with Azure</p>\n</blockquote>\n<p>The cloud it is there to give you some option on how to do it.</p>\n<p>to our data ingestion I will be using azure event hubs. It is a really secure data queue that scale really well and it is dirty cheap. can handle over 100.000 log events per day costing me <a href=\"\">Insert here vent hubs price</a></p>\n<p>For the data store I will be using azure data lake, azure data lake lets you restric the access to the data but more than that it also allows you to audit who access that data when. This will be really usefull when we talk later about how can we monitor and check who is actually reading this data.</p>\n<p>To connect the data ingestion and the data lake we will just use the capture feature from event hubs. You need to follow some manual steps to connect this right now but this shpould become fairly easy on the comming days. You can check on my post <a href=\"\">Using azure data lake for event hubs capture</a> how I did automate that.</p>\n<p>To to the index I will use auzre search for quick indexing the data and azure data lake for analytics and exploration queries on that data.</p>\n<h2 id=\"Talk-it-is-cheap-show-me-the-code\"><a href=\"#Talk-it-is-cheap-show-me-the-code\" class=\"headerlink\" title=\"Talk it is cheap show me the code\"></a>Talk it is cheap show me the code</h2><h3 id=\"1-The-generator\"><a href=\"#1-The-generator\" class=\"headerlink\" title=\"1. The generator\"></a>1. The generator</h3><p>The code for the data generator irt is quite simple I will be simulating some scenatriosn that are fairly common.</p>\n<p>I just wrote a basic .net core console app to generate this code (even after all those years and languages c# still being my language of choice).</p>\n<pre><code>\n</code></pre><p>The important part to notice it is that I have some fixed fields on my events <code>_s</code> (the event session) <code>_t</code> (the event type) those are fields that would be required in every log that I record from the application. Lets talk a little bit about event logging: the idea of creating a whole data lake for your event or logs it is to try to aggregate as much data about your system that you can. in order to do that you need to be flexible in your data schema, but at the same time you want to have some consistency between diferent entries in yuor system. the easiest way that I found so far to achieve that it is to use the namespace schema with version for event types.</p>\n<p>Basically the idea it ia that all the events that you registry must have a type, and this type must have a namespace. the namespace should be managed on the coorporation level, to guarantee consistency, means that a new team will not come up with a namespace that it is currently in use by another team. a typical type for the event would include <code>{namespace}.{application}.{event_type}.{version}</code> I had some long discussion on should I put application before event_type or event type befor application I found out that you are mostly looking for information inside a given application or set of applications so I normally include it first. important to notive here that this is just one suggestion. the only golden rule here it is that events of the same time will follow the same schema ant that it is where the most important part of the event type it is the <code>{version}</code> in the end, the idea it is simple. Every time that you change how you capture a propertie you must change at least the version of the event.</p>\n<p>I am now collecting data if you are trying to implement this in your organization I will always tell you to rush this part as fastas you can. you can always go back and fix other mistakes you can not go back in time and collect data that it is not there anymore.</p>\n"},{"title":"Using table storage in Typescript","date":"2018-07-08T01:01:01.000Z","_content":"\nFor those that don't know [table storage](https://docs.microsoft.com/en-us/azure/cosmos-db/table-storage-overview), it is a key value store that you can use it in [Azure](https://azure.microsoft.com/en-gb/). The basic thinking that I have when using table storage is. Are you spending a lot of money on Redis but your requests don't need to be < 1ms and you would be ok with that taking around 50ms, so table storage it is probably for you.\n\nYou can get really good instructions on how to use table storage using javascript on the [docs](https://docs.microsoft.com/en-us/azure/cosmos-db/table-storage-how-to-use-nodejs) but trying to do the same using Typescript proved to be a bit more challenging.\n\n<!-- more -->\n\n## How cheap it is Table storage\n\nThere is [this amazing article](https://www.troyhunt.com/working-with-154-million-records-on/) by [Troy Hunt](https://www.troyhunt.com) showing how he builds [';--have I been pwned?](https://haveibeenpwned.com/) using table storage. This was back in 2013 and he was spending $5 to store and query 154MM records.\n\nToday table storage has evolved even more and it is still cheap. You can get information about price [here](https://azure.microsoft.com/en-gb/pricing/details/storage/tables/) fit just as an example where the storage cost it is just £0.0522 per GB ![storage cost](/images/table-storage-price.png) and the cost to query it is ![transaction cost](/images/table-storage-transactions.png) £0.000369 for every 10k transactions.\n\nJust making one simple example if you would store the name, email, id and address (around **250 bytes**) for every single person in UK (around **70 million** now) and query that **10 times per second** for one month (25920000 queries) it would cost you £1.55 per month.\n\n## How to use it in typescript\n\n### Pre requisits\n\n- [NodeJs](https://nodejs.org/)\n- [Azure storage account created](https://docs.microsoft.com/en-us/azure/storage/common/storage-create-storage-account)\n\n### Starting the project\n\nnavigate to your project folder and do\n\n``` bash\nnpm init -y\nnpm i typescript @types/dotenv --save-dev\nnpm i azure-storage dotenv --save\ntsc --init\n```\n\nNow you should create a file called `index.ts` ( I am using VSCode as my editor but you can use what you think it is easier):\n\n``` typescript index.ts\nimport * as storage from \"azure-storage\"\n\nconsole.info(storage);\n```\n\nThis should output to you information about the storage library. ok, now we have everything loaded let's start playing with it.\n\n### Connecting to the table\n\nThe first thing that you will need to do it is to connect to the table.\nTo connect to the table you will need to create a storage connection you can get your storage connection in the azure portal ![get keys](/images/gettingAccessKeys.png)\n\n#### Storing the secret\n\nWe are going to be using environment variables to store the connection strings. To develop local I strongly suggest you use `dotenv` it makes using environment variables way easier locally and moves that across projects.\n\nYou need to create one file called `.env` and add the connection string that you got in the previous step here:\n\n``` bash\nAZURE_STORAGE_CONNECTION_STRING=\"YouConnectionStringValueHere\"\n```\n\nMine one end up looking like this:\n\n``` bash\nAZURE_STORAGE_CONNECTION_STRING=\"DefaultEndpointsProtocol=https;AccountName=MYACCOUNT;AccountKey=MYSECRET;EndpointSuffix=core.windows.net\"\n```\n\n#### Creating the table\n\nNow we need to load our environment file and connect to storage, so changing the `index.ts` file:\n\n``` typescript index.ts\nimport * as storage from \"azure-storage\"\nimport * as dotenv from \"dotenv\";\n\ndotenv.load();\n\nconst storageClient = storage.createTableService();\n```\n\nYou dont need to specify the connection string because by default the library look for the environment variable called `AZURE_STORAGE_CONNECTION_STRING`\n\nNow we need to create the table in case it is not available to present:\n\n``` typescript index.ts\nimport * as storage from \"azure-storage\"\nimport * as dotenv from \"dotenv\";\n\ndotenv.load();\n\nconst storageClient = storage.createTableService();\nconst tableName = \"sampletable\";\nstorageClient.createTableIfNotExists(tableName,(err, result) => {\n    if(err) throw err;\n    console.info(result);\n});\n\n```\n\nNow you can execute the code in the console using:\n\n``` bash\ntsc | node ./index.js\n```\n\nNow you should have you tyable created in tour storage account.\n\n![storage created](/images/table-created-storage.png)\n\n### Making it more typescript friendly\n\nNow that we are connecting to the databse lets make it easier to use it and something coloser to what you would expect working with modern libraries.\n\nFirst, let's create the storage class `storage.ts`\n\n``` typescript storage.ts\nimport * as storage from \"azure-storage\"\nimport * as dotenv from \"dotenv\";\n\ndotenv.load();\n\nexport class Storage{\n    private tableService : storage.TableService;\n    private tableName: string = \"default\";\n    private constructor() {\n        this.tableService = storage.createTableService();\n    }\n    static async Create(tableName: string) : Promise<Storage> {\n        var me = new Storage()\n        me.tableName = tableName;\n        await me.CreateIfDoesntExistTable();\n        return me;\n    }\n    private async CreateIfDoesntExistTable() : Promise<storage.TableService.TableResult> {\n        return new Promise((resolve, reject) =>{\n            try {\n                this.tableService.createTableIfNotExists(this.tableName, (err,result) => {\n                    if(err) throw err;\n                    resolve(result);\n                });\n            } catch (err) { reject(err); }\n        })\n    }\n}\n```\n\nOk, I know that this is a lot to take just once. We kept the same imports from `index.ts`. Now we are creating the storage class to abstract the calls to the storage\n\nFirst, we are initiating the table service in the constructor since this is a process that does not execute or have any external dependency meaning that it is ok to put that in the constructor.\n\n``` Typescript\nprivate constructor() {\n    this.tableService = storage.createTableService();\n}\n```\n\nWe kept that constructor private since we don't want someone to initiate the Storage class without a table name.\n\nSince to create a table it is required a call to an external dependency we create a \"factory\" for it so we are using the static method create as a way of doing that and on it, we make sure that the table it is created.\n\n``` typescript\nstatic async Create(tableName: string) : Promise<Storage> {\n    var me = new Storage()\n    me.tableName = tableName;\n    await me.CreateIfDoesntExistTable();\n    return me;\n}\n```\n\nThe Azure storage library does not support Promises yet instead it uses call back but not only that some of the errors in the library are not thrown back in as callback errors but as actual errors in your javascript execution (invalid table name, for example, would not come back as a callback error)\n\nSo in order to make the request resembling a more modern typescript ( and javascript), we encapsulate that in one async method\n\n``` typescript\nprivate async CreateIfDoesntExistTable() : Promise<storage.TableService.TableResult> {\n        return new Promise((resolve, reject) =>{\n            try {\n                this.tableService.createTableIfNotExists(this.tableName, (err,result) => {\n                    if(err) throw err;\n                    resolve(result);\n                });\n            } catch (err) { reject(err); }\n        })\n    }\n```\n\n---\n\nNow it is time to change back our `index.ts` but before that, since we are going to be working with async new we need to change our `tsconfig.json` we need to tell typescript that we are going to be targeting es6 or later so on the `\"target\": \"es5\",` in the `tsconfig.json` file change it to `\"target\": \"es6\",` that way you can use the async keyword\n\nThem changing the `index.ts` to look like this:\n\n``` typescript index.ts\nimport { Storage } from \"./storage\";\n\nconst tableName = \"sampletable\";\n\n(async () => {\n  await Storage.Create(tableName);\n  console.log(\"Table created\");\n})();\n```\n\nAs you can see we remove all the imports now to use only our storage class and change out initialization to use one async \"hack\":\n\n``` typescript\n(async => {   })()\n```\n\nIt is an easy way to create one async method that executes after created.\n\nNow we just need to call out factory method `await Storage.Create(tableName);` to guarantee that our table it is created.\n\nNow you can execute the code again in the console using:\n\n``` bash\ntsc | node ./index.js\n```\n\n### Inserting your first entities\n\nNow that we have the table created and can connect to it time to insert some resources on it.\n\nlets change first and add a new method on our `storage.ts` to the `Storage` class\n\n``` typescript\nasync AddOrMergeRecord(record: ITableEntity): Promise<ITableEntity> {\n    return new Promise((resolve, reject) => {\n        try {\n        const tr = this.convertToTableRecord(record);\n        this.tableService.insertOrMergeEntity(this.tableName, tr, err => {\n            if (err) throw err;\n            resolve(record);\n        });\n        } catch (err) {\n        reject(err);\n        }\n    });\n}\n```\n\nAgain we are using the same technic to convert the insertOrMergeEntity to be using promise instead of callback.\n\nThis method should be failing now because there are 2 things we need to add because of the way that objects are stored in table storage. In table storage a property it is always one object with 2 properties `$` and `_` being `$` the type to be stored and `_` the value to be stored. More than that another thing that you can see it is that the method accepts only `ITableEntity` this happens because we need to guarantee that the properties of `PartitionKey` and `RowKey` are strings and present in every single object that we need to insert.\n\nSo lets add the code to make this work first we are going to add the interface of `ITableEntity` after the last line of our `storage.ts`\n\n``` typescript\nexport interface ITableEntity {\n    PartitionKey?: string;\n    RowKey?: string;\n    [key: string]: string | number | boolean | undefined;\n}\n```\n\nYou are just requesting an object to have this 2 properties the `[key: string]: string | number | boolean | undefined;` allow the object to have any other property of the types supported by table storage.\n\nNow we need to write the code to convert the `ITableEntity` in something that it is supported by table storage fortunatly for us there is a utility helper built in into the library.\n\nWe are going to add the missing method in the `Storage` class in the `storage.ts`\n\n``` typescript\nprivate convertToTableRecord(entity: ITableEntity) {\n    let result: any = {};\n    Object.keys(entity).forEach(k => {\n      let prop = Object.getOwnPropertyDescriptor(entity, k);\n      if (prop) {\n        result[k] = new storage.TableUtilities.entityGenerator.EntityProperty(\n          prop.value\n        );\n      }\n    });\n    return result;\n}\n```\n\nThe importent line here to look at it is the `storage.TableUtilities.entityGenerator.EntityProperty` that will transform an value of any type in a value following the needs for the storage library.\n\nTime to change our `index.ts`\n\nthe new code should be something like this:\n\n``` typescript index.ts\nimport { Storage } from \"./storage\";\n\nconst tableName = \"sampletable\";\n\n(async () => {\n  const storage = await Storage.Create(tableName);\n  await storage.AddOrMergeRecord({\n    PartitionKey: \"SamplePartition\",\n    RowKey: \"SampleRow\",\n    SampleInt: 42,\n    SampleString: \"Amazing!\"\n  });\n  console.log(\"Record added\");\n})();\n\n```\n\nAs you can see we only added the `AddOrMergeRecord` you can add as many properties as you want.\n\nNow to execute again:\n\n``` bash\ntsc | node ./index.js\n```\n\nYou should have your first record inserted into the table.\n\n### Quering entities entities\n\nThere are multiple ways to query the table storage the most common being retrieve a single row by Partition and Row Id.\n\nLets add this functionality first\n\nAgain in our `storage.ts` lets add a method to query by both this value.\n\n``` typescript\nasync GetRecord(partitionKey: string, rowKey: string): Promise<ITableEntity> {\n    return new Promise<ITableEntity>((resolve, reject) => {\n      this.tableService.retrieveEntity<ITableEntity>(\n        this.tableName,\n        partitionKey,\n        rowKey,\n        (err, entity) => {\n          if (err) throw err;\n          resolve(entity);\n        }\n      );\n    });\n  }\n```\n\nAgain we are using the same strategy of covering a method in something that can be used as a Promise to a more modern javascript way of programing but not that much changes from the method itself.\n\nLets change the `index.ts` to use this query. Just include after inserting the entity the following code:\n\n``` typescript\nconst record = await storage.GetRecord(\"SamplePartition\", \"SampleRow\");\nconsole.info(record);\n```\n\nNow if you compile again (`tsc`) and run (`node ./index.js`) you will see the entity being returned but not exacly what you expected.\n\nYou are getting somethign like:\n\n``` javascript\n{ PartitionKey: { '$': 'Edm.String', _: 'SamplePartition' },\n  RowKey: { '$': 'Edm.String', _: 'SampleRow' },\n  Timestamp: { '$': 'Edm.DateTime', _: 2018-07-08T19:28:12.574Z },\n  SampleInt: { _: 42 },\n  SampleString: { _: 'Amazing!' },\n  '.metadata':\n   { metadata:\n      'https://xxx.table.core.windows.net/$metadata#sampletable/@Element',\n     etag: 'W/\"datetime\\'2018-07-08T19%3A28%3A12.5744502Z\\'\"' } }\n```\n\nThat it is not what an object of javascript should look like. so lets get back to our javascript and convert the results in something more javascript like.\n\nThe same way that we created the `convertToTableRecord` we are going to create now the `tableRecordToJavacript` method as a private method in the `Storage` class.\n\n``` typescript\nprivate tableRecordToJavacript(entity: ITableEntity): ITableEntity {\n    let result: any = {};\n    Object.keys(entity).forEach(k => {\n      // we do not want to decode metadata\n      if (k !== \".metadata\") {\n        let prop = Object.getOwnPropertyDescriptor(entity, k);\n        if (prop) {\n          result[k] = prop.value[\"_\"];\n        }\n      }\n    });\n    return result;\n  }\n```\n\nNow we just need to change the `GetRecord` method to use the private method:\n\n``` typescript\nasync GetRecord(partitionKey: string, rowKey: string): Promise<ITableEntity> {\n    return new Promise<ITableEntity>((resolve, reject) => {\n      this.tableService.retrieveEntity<ITableEntity>(\n        this.tableName,\n        partitionKey,\n        rowKey,\n        (err, entity) => {\n          if (err) throw err;\n          resolve(this.tableRecordToJavacript(entity));\n        }\n      );\n    });\n  }\n```\n\nNow when you execute you should get the expected result.\n\n``` javascript\n{ PartitionKey: 'SamplePartition',\n  RowKey: 'SampleRow',\n  Timestamp: 2018-07-08T19:54:49.427Z,\n  SampleInt: 42,\n  SampleString: 'Amazing!' }\n```\n\n","source":"_posts/using-table-storage-in-typescript.md","raw":"---\ntitle: Using table storage in Typescript\ndate: 2018/07/08 01:01:01\n---\n\nFor those that don't know [table storage](https://docs.microsoft.com/en-us/azure/cosmos-db/table-storage-overview), it is a key value store that you can use it in [Azure](https://azure.microsoft.com/en-gb/). The basic thinking that I have when using table storage is. Are you spending a lot of money on Redis but your requests don't need to be < 1ms and you would be ok with that taking around 50ms, so table storage it is probably for you.\n\nYou can get really good instructions on how to use table storage using javascript on the [docs](https://docs.microsoft.com/en-us/azure/cosmos-db/table-storage-how-to-use-nodejs) but trying to do the same using Typescript proved to be a bit more challenging.\n\n<!-- more -->\n\n## How cheap it is Table storage\n\nThere is [this amazing article](https://www.troyhunt.com/working-with-154-million-records-on/) by [Troy Hunt](https://www.troyhunt.com) showing how he builds [';--have I been pwned?](https://haveibeenpwned.com/) using table storage. This was back in 2013 and he was spending $5 to store and query 154MM records.\n\nToday table storage has evolved even more and it is still cheap. You can get information about price [here](https://azure.microsoft.com/en-gb/pricing/details/storage/tables/) fit just as an example where the storage cost it is just £0.0522 per GB ![storage cost](/images/table-storage-price.png) and the cost to query it is ![transaction cost](/images/table-storage-transactions.png) £0.000369 for every 10k transactions.\n\nJust making one simple example if you would store the name, email, id and address (around **250 bytes**) for every single person in UK (around **70 million** now) and query that **10 times per second** for one month (25920000 queries) it would cost you £1.55 per month.\n\n## How to use it in typescript\n\n### Pre requisits\n\n- [NodeJs](https://nodejs.org/)\n- [Azure storage account created](https://docs.microsoft.com/en-us/azure/storage/common/storage-create-storage-account)\n\n### Starting the project\n\nnavigate to your project folder and do\n\n``` bash\nnpm init -y\nnpm i typescript @types/dotenv --save-dev\nnpm i azure-storage dotenv --save\ntsc --init\n```\n\nNow you should create a file called `index.ts` ( I am using VSCode as my editor but you can use what you think it is easier):\n\n``` typescript index.ts\nimport * as storage from \"azure-storage\"\n\nconsole.info(storage);\n```\n\nThis should output to you information about the storage library. ok, now we have everything loaded let's start playing with it.\n\n### Connecting to the table\n\nThe first thing that you will need to do it is to connect to the table.\nTo connect to the table you will need to create a storage connection you can get your storage connection in the azure portal ![get keys](/images/gettingAccessKeys.png)\n\n#### Storing the secret\n\nWe are going to be using environment variables to store the connection strings. To develop local I strongly suggest you use `dotenv` it makes using environment variables way easier locally and moves that across projects.\n\nYou need to create one file called `.env` and add the connection string that you got in the previous step here:\n\n``` bash\nAZURE_STORAGE_CONNECTION_STRING=\"YouConnectionStringValueHere\"\n```\n\nMine one end up looking like this:\n\n``` bash\nAZURE_STORAGE_CONNECTION_STRING=\"DefaultEndpointsProtocol=https;AccountName=MYACCOUNT;AccountKey=MYSECRET;EndpointSuffix=core.windows.net\"\n```\n\n#### Creating the table\n\nNow we need to load our environment file and connect to storage, so changing the `index.ts` file:\n\n``` typescript index.ts\nimport * as storage from \"azure-storage\"\nimport * as dotenv from \"dotenv\";\n\ndotenv.load();\n\nconst storageClient = storage.createTableService();\n```\n\nYou dont need to specify the connection string because by default the library look for the environment variable called `AZURE_STORAGE_CONNECTION_STRING`\n\nNow we need to create the table in case it is not available to present:\n\n``` typescript index.ts\nimport * as storage from \"azure-storage\"\nimport * as dotenv from \"dotenv\";\n\ndotenv.load();\n\nconst storageClient = storage.createTableService();\nconst tableName = \"sampletable\";\nstorageClient.createTableIfNotExists(tableName,(err, result) => {\n    if(err) throw err;\n    console.info(result);\n});\n\n```\n\nNow you can execute the code in the console using:\n\n``` bash\ntsc | node ./index.js\n```\n\nNow you should have you tyable created in tour storage account.\n\n![storage created](/images/table-created-storage.png)\n\n### Making it more typescript friendly\n\nNow that we are connecting to the databse lets make it easier to use it and something coloser to what you would expect working with modern libraries.\n\nFirst, let's create the storage class `storage.ts`\n\n``` typescript storage.ts\nimport * as storage from \"azure-storage\"\nimport * as dotenv from \"dotenv\";\n\ndotenv.load();\n\nexport class Storage{\n    private tableService : storage.TableService;\n    private tableName: string = \"default\";\n    private constructor() {\n        this.tableService = storage.createTableService();\n    }\n    static async Create(tableName: string) : Promise<Storage> {\n        var me = new Storage()\n        me.tableName = tableName;\n        await me.CreateIfDoesntExistTable();\n        return me;\n    }\n    private async CreateIfDoesntExistTable() : Promise<storage.TableService.TableResult> {\n        return new Promise((resolve, reject) =>{\n            try {\n                this.tableService.createTableIfNotExists(this.tableName, (err,result) => {\n                    if(err) throw err;\n                    resolve(result);\n                });\n            } catch (err) { reject(err); }\n        })\n    }\n}\n```\n\nOk, I know that this is a lot to take just once. We kept the same imports from `index.ts`. Now we are creating the storage class to abstract the calls to the storage\n\nFirst, we are initiating the table service in the constructor since this is a process that does not execute or have any external dependency meaning that it is ok to put that in the constructor.\n\n``` Typescript\nprivate constructor() {\n    this.tableService = storage.createTableService();\n}\n```\n\nWe kept that constructor private since we don't want someone to initiate the Storage class without a table name.\n\nSince to create a table it is required a call to an external dependency we create a \"factory\" for it so we are using the static method create as a way of doing that and on it, we make sure that the table it is created.\n\n``` typescript\nstatic async Create(tableName: string) : Promise<Storage> {\n    var me = new Storage()\n    me.tableName = tableName;\n    await me.CreateIfDoesntExistTable();\n    return me;\n}\n```\n\nThe Azure storage library does not support Promises yet instead it uses call back but not only that some of the errors in the library are not thrown back in as callback errors but as actual errors in your javascript execution (invalid table name, for example, would not come back as a callback error)\n\nSo in order to make the request resembling a more modern typescript ( and javascript), we encapsulate that in one async method\n\n``` typescript\nprivate async CreateIfDoesntExistTable() : Promise<storage.TableService.TableResult> {\n        return new Promise((resolve, reject) =>{\n            try {\n                this.tableService.createTableIfNotExists(this.tableName, (err,result) => {\n                    if(err) throw err;\n                    resolve(result);\n                });\n            } catch (err) { reject(err); }\n        })\n    }\n```\n\n---\n\nNow it is time to change back our `index.ts` but before that, since we are going to be working with async new we need to change our `tsconfig.json` we need to tell typescript that we are going to be targeting es6 or later so on the `\"target\": \"es5\",` in the `tsconfig.json` file change it to `\"target\": \"es6\",` that way you can use the async keyword\n\nThem changing the `index.ts` to look like this:\n\n``` typescript index.ts\nimport { Storage } from \"./storage\";\n\nconst tableName = \"sampletable\";\n\n(async () => {\n  await Storage.Create(tableName);\n  console.log(\"Table created\");\n})();\n```\n\nAs you can see we remove all the imports now to use only our storage class and change out initialization to use one async \"hack\":\n\n``` typescript\n(async => {   })()\n```\n\nIt is an easy way to create one async method that executes after created.\n\nNow we just need to call out factory method `await Storage.Create(tableName);` to guarantee that our table it is created.\n\nNow you can execute the code again in the console using:\n\n``` bash\ntsc | node ./index.js\n```\n\n### Inserting your first entities\n\nNow that we have the table created and can connect to it time to insert some resources on it.\n\nlets change first and add a new method on our `storage.ts` to the `Storage` class\n\n``` typescript\nasync AddOrMergeRecord(record: ITableEntity): Promise<ITableEntity> {\n    return new Promise((resolve, reject) => {\n        try {\n        const tr = this.convertToTableRecord(record);\n        this.tableService.insertOrMergeEntity(this.tableName, tr, err => {\n            if (err) throw err;\n            resolve(record);\n        });\n        } catch (err) {\n        reject(err);\n        }\n    });\n}\n```\n\nAgain we are using the same technic to convert the insertOrMergeEntity to be using promise instead of callback.\n\nThis method should be failing now because there are 2 things we need to add because of the way that objects are stored in table storage. In table storage a property it is always one object with 2 properties `$` and `_` being `$` the type to be stored and `_` the value to be stored. More than that another thing that you can see it is that the method accepts only `ITableEntity` this happens because we need to guarantee that the properties of `PartitionKey` and `RowKey` are strings and present in every single object that we need to insert.\n\nSo lets add the code to make this work first we are going to add the interface of `ITableEntity` after the last line of our `storage.ts`\n\n``` typescript\nexport interface ITableEntity {\n    PartitionKey?: string;\n    RowKey?: string;\n    [key: string]: string | number | boolean | undefined;\n}\n```\n\nYou are just requesting an object to have this 2 properties the `[key: string]: string | number | boolean | undefined;` allow the object to have any other property of the types supported by table storage.\n\nNow we need to write the code to convert the `ITableEntity` in something that it is supported by table storage fortunatly for us there is a utility helper built in into the library.\n\nWe are going to add the missing method in the `Storage` class in the `storage.ts`\n\n``` typescript\nprivate convertToTableRecord(entity: ITableEntity) {\n    let result: any = {};\n    Object.keys(entity).forEach(k => {\n      let prop = Object.getOwnPropertyDescriptor(entity, k);\n      if (prop) {\n        result[k] = new storage.TableUtilities.entityGenerator.EntityProperty(\n          prop.value\n        );\n      }\n    });\n    return result;\n}\n```\n\nThe importent line here to look at it is the `storage.TableUtilities.entityGenerator.EntityProperty` that will transform an value of any type in a value following the needs for the storage library.\n\nTime to change our `index.ts`\n\nthe new code should be something like this:\n\n``` typescript index.ts\nimport { Storage } from \"./storage\";\n\nconst tableName = \"sampletable\";\n\n(async () => {\n  const storage = await Storage.Create(tableName);\n  await storage.AddOrMergeRecord({\n    PartitionKey: \"SamplePartition\",\n    RowKey: \"SampleRow\",\n    SampleInt: 42,\n    SampleString: \"Amazing!\"\n  });\n  console.log(\"Record added\");\n})();\n\n```\n\nAs you can see we only added the `AddOrMergeRecord` you can add as many properties as you want.\n\nNow to execute again:\n\n``` bash\ntsc | node ./index.js\n```\n\nYou should have your first record inserted into the table.\n\n### Quering entities entities\n\nThere are multiple ways to query the table storage the most common being retrieve a single row by Partition and Row Id.\n\nLets add this functionality first\n\nAgain in our `storage.ts` lets add a method to query by both this value.\n\n``` typescript\nasync GetRecord(partitionKey: string, rowKey: string): Promise<ITableEntity> {\n    return new Promise<ITableEntity>((resolve, reject) => {\n      this.tableService.retrieveEntity<ITableEntity>(\n        this.tableName,\n        partitionKey,\n        rowKey,\n        (err, entity) => {\n          if (err) throw err;\n          resolve(entity);\n        }\n      );\n    });\n  }\n```\n\nAgain we are using the same strategy of covering a method in something that can be used as a Promise to a more modern javascript way of programing but not that much changes from the method itself.\n\nLets change the `index.ts` to use this query. Just include after inserting the entity the following code:\n\n``` typescript\nconst record = await storage.GetRecord(\"SamplePartition\", \"SampleRow\");\nconsole.info(record);\n```\n\nNow if you compile again (`tsc`) and run (`node ./index.js`) you will see the entity being returned but not exacly what you expected.\n\nYou are getting somethign like:\n\n``` javascript\n{ PartitionKey: { '$': 'Edm.String', _: 'SamplePartition' },\n  RowKey: { '$': 'Edm.String', _: 'SampleRow' },\n  Timestamp: { '$': 'Edm.DateTime', _: 2018-07-08T19:28:12.574Z },\n  SampleInt: { _: 42 },\n  SampleString: { _: 'Amazing!' },\n  '.metadata':\n   { metadata:\n      'https://xxx.table.core.windows.net/$metadata#sampletable/@Element',\n     etag: 'W/\"datetime\\'2018-07-08T19%3A28%3A12.5744502Z\\'\"' } }\n```\n\nThat it is not what an object of javascript should look like. so lets get back to our javascript and convert the results in something more javascript like.\n\nThe same way that we created the `convertToTableRecord` we are going to create now the `tableRecordToJavacript` method as a private method in the `Storage` class.\n\n``` typescript\nprivate tableRecordToJavacript(entity: ITableEntity): ITableEntity {\n    let result: any = {};\n    Object.keys(entity).forEach(k => {\n      // we do not want to decode metadata\n      if (k !== \".metadata\") {\n        let prop = Object.getOwnPropertyDescriptor(entity, k);\n        if (prop) {\n          result[k] = prop.value[\"_\"];\n        }\n      }\n    });\n    return result;\n  }\n```\n\nNow we just need to change the `GetRecord` method to use the private method:\n\n``` typescript\nasync GetRecord(partitionKey: string, rowKey: string): Promise<ITableEntity> {\n    return new Promise<ITableEntity>((resolve, reject) => {\n      this.tableService.retrieveEntity<ITableEntity>(\n        this.tableName,\n        partitionKey,\n        rowKey,\n        (err, entity) => {\n          if (err) throw err;\n          resolve(this.tableRecordToJavacript(entity));\n        }\n      );\n    });\n  }\n```\n\nNow when you execute you should get the expected result.\n\n``` javascript\n{ PartitionKey: 'SamplePartition',\n  RowKey: 'SampleRow',\n  Timestamp: 2018-07-08T19:54:49.427Z,\n  SampleInt: 42,\n  SampleString: 'Amazing!' }\n```\n\n","slug":"using-table-storage-in-typescript","published":1,"updated":"2018-07-08T20:04:48.874Z","_id":"cjjck5mnf0004ecmrhbo8gija","comments":1,"layout":"post","photos":[],"link":"","content":"<p>For those that don’t know <a href=\"https://docs.microsoft.com/en-us/azure/cosmos-db/table-storage-overview\" target=\"_blank\" rel=\"noopener\">table storage</a>, it is a key value store that you can use it in <a href=\"https://azure.microsoft.com/en-gb/\" target=\"_blank\" rel=\"noopener\">Azure</a>. The basic thinking that I have when using table storage is. Are you spending a lot of money on Redis but your requests don’t need to be &lt; 1ms and you would be ok with that taking around 50ms, so table storage it is probably for you.</p>\n<p>You can get really good instructions on how to use table storage using javascript on the <a href=\"https://docs.microsoft.com/en-us/azure/cosmos-db/table-storage-how-to-use-nodejs\" target=\"_blank\" rel=\"noopener\">docs</a> but trying to do the same using Typescript proved to be a bit more challenging.</p>\n<a id=\"more\"></a>\n<h2 id=\"How-cheap-it-is-Table-storage\"><a href=\"#How-cheap-it-is-Table-storage\" class=\"headerlink\" title=\"How cheap it is Table storage\"></a>How cheap it is Table storage</h2><p>There is <a href=\"https://www.troyhunt.com/working-with-154-million-records-on/\" target=\"_blank\" rel=\"noopener\">this amazing article</a> by <a href=\"https://www.troyhunt.com\" target=\"_blank\" rel=\"noopener\">Troy Hunt</a> showing how he builds <a href=\"https://haveibeenpwned.com/\" target=\"_blank\" rel=\"noopener\">‘;–have I been pwned?</a> using table storage. This was back in 2013 and he was spending $5 to store and query 154MM records.</p>\n<p>Today table storage has evolved even more and it is still cheap. You can get information about price <a href=\"https://azure.microsoft.com/en-gb/pricing/details/storage/tables/\" target=\"_blank\" rel=\"noopener\">here</a> fit just as an example where the storage cost it is just £0.0522 per GB <img src=\"/images/table-storage-price.png\" alt=\"storage cost\"> and the cost to query it is <img src=\"/images/table-storage-transactions.png\" alt=\"transaction cost\"> £0.000369 for every 10k transactions.</p>\n<p>Just making one simple example if you would store the name, email, id and address (around <strong>250 bytes</strong>) for every single person in UK (around <strong>70 million</strong> now) and query that <strong>10 times per second</strong> for one month (25920000 queries) it would cost you £1.55 per month.</p>\n<h2 id=\"How-to-use-it-in-typescript\"><a href=\"#How-to-use-it-in-typescript\" class=\"headerlink\" title=\"How to use it in typescript\"></a>How to use it in typescript</h2><h3 id=\"Pre-requisits\"><a href=\"#Pre-requisits\" class=\"headerlink\" title=\"Pre requisits\"></a>Pre requisits</h3><ul>\n<li><a href=\"https://nodejs.org/\" target=\"_blank\" rel=\"noopener\">NodeJs</a></li>\n<li><a href=\"https://docs.microsoft.com/en-us/azure/storage/common/storage-create-storage-account\" target=\"_blank\" rel=\"noopener\">Azure storage account created</a></li>\n</ul>\n<h3 id=\"Starting-the-project\"><a href=\"#Starting-the-project\" class=\"headerlink\" title=\"Starting the project\"></a>Starting the project</h3><p>navigate to your project folder and do</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init -y</span><br><span class=\"line\">npm i typescript @types/dotenv --save-dev</span><br><span class=\"line\">npm i azure-storage dotenv --save</span><br><span class=\"line\">tsc --init</span><br></pre></td></tr></table></figure>\n<p>Now you should create a file called <code>index.ts</code> ( I am using VSCode as my editor but you can use what you think it is easier):</p>\n<figure class=\"highlight typescript\"><figcaption><span>index.ts</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> storage <span class=\"keyword\">from</span> <span class=\"string\">\"azure-storage\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.info(storage);</span><br></pre></td></tr></table></figure>\n<p>This should output to you information about the storage library. ok, now we have everything loaded let’s start playing with it.</p>\n<h3 id=\"Connecting-to-the-table\"><a href=\"#Connecting-to-the-table\" class=\"headerlink\" title=\"Connecting to the table\"></a>Connecting to the table</h3><p>The first thing that you will need to do it is to connect to the table.<br>To connect to the table you will need to create a storage connection you can get your storage connection in the azure portal <img src=\"/images/gettingAccessKeys.png\" alt=\"get keys\"></p>\n<h4 id=\"Storing-the-secret\"><a href=\"#Storing-the-secret\" class=\"headerlink\" title=\"Storing the secret\"></a>Storing the secret</h4><p>We are going to be using environment variables to store the connection strings. To develop local I strongly suggest you use <code>dotenv</code> it makes using environment variables way easier locally and moves that across projects.</p>\n<p>You need to create one file called <code>.env</code> and add the connection string that you got in the previous step here:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AZURE_STORAGE_CONNECTION_STRING=<span class=\"string\">\"YouConnectionStringValueHere\"</span></span><br></pre></td></tr></table></figure>\n<p>Mine one end up looking like this:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AZURE_STORAGE_CONNECTION_STRING=<span class=\"string\">\"DefaultEndpointsProtocol=https;AccountName=MYACCOUNT;AccountKey=MYSECRET;EndpointSuffix=core.windows.net\"</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Creating-the-table\"><a href=\"#Creating-the-table\" class=\"headerlink\" title=\"Creating the table\"></a>Creating the table</h4><p>Now we need to load our environment file and connect to storage, so changing the <code>index.ts</code> file:</p>\n<figure class=\"highlight typescript\"><figcaption><span>index.ts</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> storage <span class=\"keyword\">from</span> <span class=\"string\">\"azure-storage\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> dotenv <span class=\"keyword\">from</span> <span class=\"string\">\"dotenv\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">dotenv.load();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> storageClient = storage.createTableService();</span><br></pre></td></tr></table></figure>\n<p>You dont need to specify the connection string because by default the library look for the environment variable called <code>AZURE_STORAGE_CONNECTION_STRING</code></p>\n<p>Now we need to create the table in case it is not available to present:</p>\n<figure class=\"highlight typescript\"><figcaption><span>index.ts</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> storage <span class=\"keyword\">from</span> <span class=\"string\">\"azure-storage\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> dotenv <span class=\"keyword\">from</span> <span class=\"string\">\"dotenv\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">dotenv.load();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> storageClient = storage.createTableService();</span><br><span class=\"line\"><span class=\"keyword\">const</span> tableName = <span class=\"string\">\"sampletable\"</span>;</span><br><span class=\"line\">storageClient.createTableIfNotExists(tableName,<span class=\"function\">(<span class=\"params\">err, result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.info(result);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>Now you can execute the code in the console using:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tsc | node ./index.js</span><br></pre></td></tr></table></figure>\n<p>Now you should have you tyable created in tour storage account.</p>\n<p><img src=\"/images/table-created-storage.png\" alt=\"storage created\"></p>\n<h3 id=\"Making-it-more-typescript-friendly\"><a href=\"#Making-it-more-typescript-friendly\" class=\"headerlink\" title=\"Making it more typescript friendly\"></a>Making it more typescript friendly</h3><p>Now that we are connecting to the databse lets make it easier to use it and something coloser to what you would expect working with modern libraries.</p>\n<p>First, let’s create the storage class <code>storage.ts</code></p>\n<figure class=\"highlight typescript\"><figcaption><span>storage.ts</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> storage <span class=\"keyword\">from</span> <span class=\"string\">\"azure-storage\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> dotenv <span class=\"keyword\">from</span> <span class=\"string\">\"dotenv\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">dotenv.load();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Storage&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> tableService : storage.TableService;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> tableName: <span class=\"built_in\">string</span> = <span class=\"string\">\"default\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.tableService = storage.createTableService();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">async</span> Create(tableName: <span class=\"built_in\">string</span>) : <span class=\"built_in\">Promise</span>&lt;Storage&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> me = <span class=\"keyword\">new</span> Storage()</span><br><span class=\"line\">        me.tableName = tableName;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> me.CreateIfDoesntExistTable();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> me;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">async</span> CreateIfDoesntExistTable() : <span class=\"built_in\">Promise</span>&lt;storage.TableService.TableResult&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.tableService.createTableIfNotExists(<span class=\"keyword\">this</span>.tableName, <span class=\"function\">(<span class=\"params\">err,result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">                    resolve(result);</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (err) &#123; reject(err); &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Ok, I know that this is a lot to take just once. We kept the same imports from <code>index.ts</code>. Now we are creating the storage class to abstract the calls to the storage</p>\n<p>First, we are initiating the table service in the constructor since this is a process that does not execute or have any external dependency meaning that it is ok to put that in the constructor.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.tableService = storage.createTableService();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>We kept that constructor private since we don’t want someone to initiate the Storage class without a table name.</p>\n<p>Since to create a table it is required a call to an external dependency we create a “factory” for it so we are using the static method create as a way of doing that and on it, we make sure that the table it is created.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">async</span> Create(tableName: <span class=\"built_in\">string</span>) : <span class=\"built_in\">Promise</span>&lt;Storage&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> me = <span class=\"keyword\">new</span> Storage()</span><br><span class=\"line\">    me.tableName = tableName;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> me.CreateIfDoesntExistTable();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> me;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The Azure storage library does not support Promises yet instead it uses call back but not only that some of the errors in the library are not thrown back in as callback errors but as actual errors in your javascript execution (invalid table name, for example, would not come back as a callback error)</p>\n<p>So in order to make the request resembling a more modern typescript ( and javascript), we encapsulate that in one async method</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">async</span> CreateIfDoesntExistTable() : <span class=\"built_in\">Promise</span>&lt;storage.TableService.TableResult&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.tableService.createTableIfNotExists(<span class=\"keyword\">this</span>.tableName, <span class=\"function\">(<span class=\"params\">err,result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">                    resolve(result);</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (err) &#123; reject(err); &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>Now it is time to change back our <code>index.ts</code> but before that, since we are going to be working with async new we need to change our <code>tsconfig.json</code> we need to tell typescript that we are going to be targeting es6 or later so on the <code>&quot;target&quot;: &quot;es5&quot;,</code> in the <code>tsconfig.json</code> file change it to <code>&quot;target&quot;: &quot;es6&quot;,</code> that way you can use the async keyword</p>\n<p>Them changing the <code>index.ts</code> to look like this:</p>\n<figure class=\"highlight typescript\"><figcaption><span>index.ts</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Storage &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"./storage\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> tableName = <span class=\"string\">\"sampletable\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">await</span> Storage.Create(tableName);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Table created\"</span>);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<p>As you can see we remove all the imports now to use only our storage class and change out initialization to use one async “hack”:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"params\">async</span> =&gt;</span> &#123;   &#125;)()</span><br></pre></td></tr></table></figure>\n<p>It is an easy way to create one async method that executes after created.</p>\n<p>Now we just need to call out factory method <code>await Storage.Create(tableName);</code> to guarantee that our table it is created.</p>\n<p>Now you can execute the code again in the console using:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tsc | node ./index.js</span><br></pre></td></tr></table></figure>\n<h3 id=\"Inserting-your-first-entities\"><a href=\"#Inserting-your-first-entities\" class=\"headerlink\" title=\"Inserting your first entities\"></a>Inserting your first entities</h3><p>Now that we have the table created and can connect to it time to insert some resources on it.</p>\n<p>lets change first and add a new method on our <code>storage.ts</code> to the <code>Storage</code> class</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> AddOrMergeRecord(record: ITableEntity): <span class=\"built_in\">Promise</span>&lt;ITableEntity&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> tr = <span class=\"keyword\">this</span>.convertToTableRecord(record);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.tableService.insertOrMergeEntity(<span class=\"keyword\">this</span>.tableName, tr, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">            resolve(record);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">        reject(err);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Again we are using the same technic to convert the insertOrMergeEntity to be using promise instead of callback.</p>\n<p>This method should be failing now because there are 2 things we need to add because of the way that objects are stored in table storage. In table storage a property it is always one object with 2 properties <code>$</code> and <code>_</code> being <code>$</code> the type to be stored and <code>_</code> the value to be stored. More than that another thing that you can see it is that the method accepts only <code>ITableEntity</code> this happens because we need to guarantee that the properties of <code>PartitionKey</code> and <code>RowKey</code> are strings and present in every single object that we need to insert.</p>\n<p>So lets add the code to make this work first we are going to add the interface of <code>ITableEntity</code> after the last line of our <code>storage.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> ITableEntity &#123;</span><br><span class=\"line\">    PartitionKey?: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    RowKey?: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    [key: <span class=\"built_in\">string</span>]: <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span> | <span class=\"built_in\">boolean</span> | <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>You are just requesting an object to have this 2 properties the <code>[key: string]: string | number | boolean | undefined;</code> allow the object to have any other property of the types supported by table storage.</p>\n<p>Now we need to write the code to convert the <code>ITableEntity</code> in something that it is supported by table storage fortunatly for us there is a utility helper built in into the library.</p>\n<p>We are going to add the missing method in the <code>Storage</code> class in the <code>storage.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> convertToTableRecord(entity: ITableEntity) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result: <span class=\"built_in\">any</span> = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.keys(entity).forEach(<span class=\"function\"><span class=\"params\">k</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> prop = <span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(entity, k);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (prop) &#123;</span><br><span class=\"line\">        result[k] = <span class=\"keyword\">new</span> storage.TableUtilities.entityGenerator.EntityProperty(</span><br><span class=\"line\">          prop.value</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The importent line here to look at it is the <code>storage.TableUtilities.entityGenerator.EntityProperty</code> that will transform an value of any type in a value following the needs for the storage library.</p>\n<p>Time to change our <code>index.ts</code></p>\n<p>the new code should be something like this:</p>\n<figure class=\"highlight typescript\"><figcaption><span>index.ts</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Storage &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"./storage\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> tableName = <span class=\"string\">\"sampletable\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> storage = <span class=\"keyword\">await</span> Storage.Create(tableName);</span><br><span class=\"line\">  <span class=\"keyword\">await</span> storage.AddOrMergeRecord(&#123;</span><br><span class=\"line\">    PartitionKey: <span class=\"string\">\"SamplePartition\"</span>,</span><br><span class=\"line\">    RowKey: <span class=\"string\">\"SampleRow\"</span>,</span><br><span class=\"line\">    SampleInt: <span class=\"number\">42</span>,</span><br><span class=\"line\">    SampleString: <span class=\"string\">\"Amazing!\"</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Record added\"</span>);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<p>As you can see we only added the <code>AddOrMergeRecord</code> you can add as many properties as you want.</p>\n<p>Now to execute again:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tsc | node ./index.js</span><br></pre></td></tr></table></figure>\n<p>You should have your first record inserted into the table.</p>\n<h3 id=\"Quering-entities-entities\"><a href=\"#Quering-entities-entities\" class=\"headerlink\" title=\"Quering entities entities\"></a>Quering entities entities</h3><p>There are multiple ways to query the table storage the most common being retrieve a single row by Partition and Row Id.</p>\n<p>Lets add this functionality first</p>\n<p>Again in our <code>storage.ts</code> lets add a method to query by both this value.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> GetRecord(partitionKey: <span class=\"built_in\">string</span>, rowKey: <span class=\"built_in\">string</span>): <span class=\"built_in\">Promise</span>&lt;ITableEntity&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>&lt;ITableEntity&gt;<span class=\"function\">(<span class=\"params\">(<span class=\"params\">resolve, reject</span>) =&gt; &#123;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">      <span class=\"keyword\">this</span>.tableService.retrieveEntity&lt;ITableEntity&gt;(<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"params\">        <span class=\"keyword\">this</span>.tableName,</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"params\">        partitionKey,</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"params\">        rowKey,</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"params\">        (<span class=\"params\">err, entity</span>) =&gt; &#123;</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"params\">          <span class=\"keyword\">if</span> (<span class=\"params\">err</span>) <span class=\"keyword\">throw</span> err;</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"params\">          resolve(<span class=\"params\">entity</span>);</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"params\">        &#125;</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"params\">      </span>);</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    &#125;</span>);</span></span><br><span class=\"line\"><span class=\"function\">  &#125;</span></span><br></pre></td></tr></table></figure>\n<p>Again we are using the same strategy of covering a method in something that can be used as a Promise to a more modern javascript way of programing but not that much changes from the method itself.</p>\n<p>Lets change the <code>index.ts</code> to use this query. Just include after inserting the entity the following code:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> record = <span class=\"keyword\">await</span> storage.GetRecord(<span class=\"string\">\"SamplePartition\"</span>, <span class=\"string\">\"SampleRow\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.info(record);</span><br></pre></td></tr></table></figure>\n<p>Now if you compile again (<code>tsc</code>) and run (<code>node ./index.js</code>) you will see the entity being returned but not exacly what you expected.</p>\n<p>You are getting somethign like:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; <span class=\"attr\">PartitionKey</span>: &#123; <span class=\"string\">'$'</span>: <span class=\"string\">'Edm.String'</span>, <span class=\"attr\">_</span>: <span class=\"string\">'SamplePartition'</span> &#125;,</span><br><span class=\"line\">  RowKey: &#123; <span class=\"string\">'$'</span>: <span class=\"string\">'Edm.String'</span>, <span class=\"attr\">_</span>: <span class=\"string\">'SampleRow'</span> &#125;,</span><br><span class=\"line\">  Timestamp: &#123; <span class=\"string\">'$'</span>: <span class=\"string\">'Edm.DateTime'</span>, <span class=\"attr\">_</span>: <span class=\"number\">2018</span><span class=\"number\">-07</span><span class=\"number\">-08</span>T19:<span class=\"number\">28</span>:<span class=\"number\">12.574</span>Z &#125;,</span><br><span class=\"line\">  SampleInt: &#123; <span class=\"attr\">_</span>: <span class=\"number\">42</span> &#125;,</span><br><span class=\"line\">  SampleString: &#123; <span class=\"attr\">_</span>: <span class=\"string\">'Amazing!'</span> &#125;,</span><br><span class=\"line\">  <span class=\"string\">'.metadata'</span>:</span><br><span class=\"line\">   &#123; <span class=\"attr\">metadata</span>:</span><br><span class=\"line\">      <span class=\"string\">'https://xxx.table.core.windows.net/$metadata#sampletable/@Element'</span>,</span><br><span class=\"line\">     etag: <span class=\"string\">'W/\"datetime\\'2018-07-08T19%3A28%3A12.5744502Z\\'\"'</span> &#125; &#125;</span><br></pre></td></tr></table></figure>\n<p>That it is not what an object of javascript should look like. so lets get back to our javascript and convert the results in something more javascript like.</p>\n<p>The same way that we created the <code>convertToTableRecord</code> we are going to create now the <code>tableRecordToJavacript</code> method as a private method in the <code>Storage</code> class.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> tableRecordToJavacript(entity: ITableEntity): ITableEntity &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result: <span class=\"built_in\">any</span> = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.keys(entity).forEach(<span class=\"function\"><span class=\"params\">k</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// we do not want to decode metadata</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (k !== <span class=\"string\">\".metadata\"</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> prop = <span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(entity, k);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (prop) &#123;</span><br><span class=\"line\">          result[k] = prop.value[<span class=\"string\">\"_\"</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>Now we just need to change the <code>GetRecord</code> method to use the private method:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> GetRecord(partitionKey: <span class=\"built_in\">string</span>, rowKey: <span class=\"built_in\">string</span>): <span class=\"built_in\">Promise</span>&lt;ITableEntity&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>&lt;ITableEntity&gt;<span class=\"function\">(<span class=\"params\">(<span class=\"params\">resolve, reject</span>) =&gt; &#123;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">      <span class=\"keyword\">this</span>.tableService.retrieveEntity&lt;ITableEntity&gt;(<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"params\">        <span class=\"keyword\">this</span>.tableName,</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"params\">        partitionKey,</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"params\">        rowKey,</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"params\">        (<span class=\"params\">err, entity</span>) =&gt; &#123;</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"params\">          <span class=\"keyword\">if</span> (<span class=\"params\">err</span>) <span class=\"keyword\">throw</span> err;</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"params\">          resolve(<span class=\"params\"><span class=\"keyword\">this</span>.tableRecordToJavacript(<span class=\"params\">entity</span>)</span>);</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"params\">        &#125;</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"params\">      </span>);</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    &#125;</span>);</span></span><br><span class=\"line\"><span class=\"function\">  &#125;</span></span><br></pre></td></tr></table></figure>\n<p>Now when you execute you should get the expected result.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; <span class=\"attr\">PartitionKey</span>: <span class=\"string\">'SamplePartition'</span>,</span><br><span class=\"line\">  RowKey: <span class=\"string\">'SampleRow'</span>,</span><br><span class=\"line\">  Timestamp: <span class=\"number\">2018</span><span class=\"number\">-07</span><span class=\"number\">-08</span>T19:<span class=\"number\">54</span>:<span class=\"number\">49.427</span>Z,</span><br><span class=\"line\">  SampleInt: <span class=\"number\">42</span>,</span><br><span class=\"line\">  SampleString: <span class=\"string\">'Amazing!'</span> &#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>For those that don’t know <a href=\"https://docs.microsoft.com/en-us/azure/cosmos-db/table-storage-overview\" target=\"_blank\" rel=\"noopener\">table storage</a>, it is a key value store that you can use it in <a href=\"https://azure.microsoft.com/en-gb/\" target=\"_blank\" rel=\"noopener\">Azure</a>. The basic thinking that I have when using table storage is. Are you spending a lot of money on Redis but your requests don’t need to be &lt; 1ms and you would be ok with that taking around 50ms, so table storage it is probably for you.</p>\n<p>You can get really good instructions on how to use table storage using javascript on the <a href=\"https://docs.microsoft.com/en-us/azure/cosmos-db/table-storage-how-to-use-nodejs\" target=\"_blank\" rel=\"noopener\">docs</a> but trying to do the same using Typescript proved to be a bit more challenging.</p>","more":"<h2 id=\"How-cheap-it-is-Table-storage\"><a href=\"#How-cheap-it-is-Table-storage\" class=\"headerlink\" title=\"How cheap it is Table storage\"></a>How cheap it is Table storage</h2><p>There is <a href=\"https://www.troyhunt.com/working-with-154-million-records-on/\" target=\"_blank\" rel=\"noopener\">this amazing article</a> by <a href=\"https://www.troyhunt.com\" target=\"_blank\" rel=\"noopener\">Troy Hunt</a> showing how he builds <a href=\"https://haveibeenpwned.com/\" target=\"_blank\" rel=\"noopener\">‘;–have I been pwned?</a> using table storage. This was back in 2013 and he was spending $5 to store and query 154MM records.</p>\n<p>Today table storage has evolved even more and it is still cheap. You can get information about price <a href=\"https://azure.microsoft.com/en-gb/pricing/details/storage/tables/\" target=\"_blank\" rel=\"noopener\">here</a> fit just as an example where the storage cost it is just £0.0522 per GB <img src=\"/images/table-storage-price.png\" alt=\"storage cost\"> and the cost to query it is <img src=\"/images/table-storage-transactions.png\" alt=\"transaction cost\"> £0.000369 for every 10k transactions.</p>\n<p>Just making one simple example if you would store the name, email, id and address (around <strong>250 bytes</strong>) for every single person in UK (around <strong>70 million</strong> now) and query that <strong>10 times per second</strong> for one month (25920000 queries) it would cost you £1.55 per month.</p>\n<h2 id=\"How-to-use-it-in-typescript\"><a href=\"#How-to-use-it-in-typescript\" class=\"headerlink\" title=\"How to use it in typescript\"></a>How to use it in typescript</h2><h3 id=\"Pre-requisits\"><a href=\"#Pre-requisits\" class=\"headerlink\" title=\"Pre requisits\"></a>Pre requisits</h3><ul>\n<li><a href=\"https://nodejs.org/\" target=\"_blank\" rel=\"noopener\">NodeJs</a></li>\n<li><a href=\"https://docs.microsoft.com/en-us/azure/storage/common/storage-create-storage-account\" target=\"_blank\" rel=\"noopener\">Azure storage account created</a></li>\n</ul>\n<h3 id=\"Starting-the-project\"><a href=\"#Starting-the-project\" class=\"headerlink\" title=\"Starting the project\"></a>Starting the project</h3><p>navigate to your project folder and do</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init -y</span><br><span class=\"line\">npm i typescript @types/dotenv --save-dev</span><br><span class=\"line\">npm i azure-storage dotenv --save</span><br><span class=\"line\">tsc --init</span><br></pre></td></tr></table></figure>\n<p>Now you should create a file called <code>index.ts</code> ( I am using VSCode as my editor but you can use what you think it is easier):</p>\n<figure class=\"highlight typescript\"><figcaption><span>index.ts</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> storage <span class=\"keyword\">from</span> <span class=\"string\">\"azure-storage\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.info(storage);</span><br></pre></td></tr></table></figure>\n<p>This should output to you information about the storage library. ok, now we have everything loaded let’s start playing with it.</p>\n<h3 id=\"Connecting-to-the-table\"><a href=\"#Connecting-to-the-table\" class=\"headerlink\" title=\"Connecting to the table\"></a>Connecting to the table</h3><p>The first thing that you will need to do it is to connect to the table.<br>To connect to the table you will need to create a storage connection you can get your storage connection in the azure portal <img src=\"/images/gettingAccessKeys.png\" alt=\"get keys\"></p>\n<h4 id=\"Storing-the-secret\"><a href=\"#Storing-the-secret\" class=\"headerlink\" title=\"Storing the secret\"></a>Storing the secret</h4><p>We are going to be using environment variables to store the connection strings. To develop local I strongly suggest you use <code>dotenv</code> it makes using environment variables way easier locally and moves that across projects.</p>\n<p>You need to create one file called <code>.env</code> and add the connection string that you got in the previous step here:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AZURE_STORAGE_CONNECTION_STRING=<span class=\"string\">\"YouConnectionStringValueHere\"</span></span><br></pre></td></tr></table></figure>\n<p>Mine one end up looking like this:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AZURE_STORAGE_CONNECTION_STRING=<span class=\"string\">\"DefaultEndpointsProtocol=https;AccountName=MYACCOUNT;AccountKey=MYSECRET;EndpointSuffix=core.windows.net\"</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Creating-the-table\"><a href=\"#Creating-the-table\" class=\"headerlink\" title=\"Creating the table\"></a>Creating the table</h4><p>Now we need to load our environment file and connect to storage, so changing the <code>index.ts</code> file:</p>\n<figure class=\"highlight typescript\"><figcaption><span>index.ts</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> storage <span class=\"keyword\">from</span> <span class=\"string\">\"azure-storage\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> dotenv <span class=\"keyword\">from</span> <span class=\"string\">\"dotenv\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">dotenv.load();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> storageClient = storage.createTableService();</span><br></pre></td></tr></table></figure>\n<p>You dont need to specify the connection string because by default the library look for the environment variable called <code>AZURE_STORAGE_CONNECTION_STRING</code></p>\n<p>Now we need to create the table in case it is not available to present:</p>\n<figure class=\"highlight typescript\"><figcaption><span>index.ts</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> storage <span class=\"keyword\">from</span> <span class=\"string\">\"azure-storage\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> dotenv <span class=\"keyword\">from</span> <span class=\"string\">\"dotenv\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">dotenv.load();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> storageClient = storage.createTableService();</span><br><span class=\"line\"><span class=\"keyword\">const</span> tableName = <span class=\"string\">\"sampletable\"</span>;</span><br><span class=\"line\">storageClient.createTableIfNotExists(tableName,<span class=\"function\">(<span class=\"params\">err, result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.info(result);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>Now you can execute the code in the console using:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tsc | node ./index.js</span><br></pre></td></tr></table></figure>\n<p>Now you should have you tyable created in tour storage account.</p>\n<p><img src=\"/images/table-created-storage.png\" alt=\"storage created\"></p>\n<h3 id=\"Making-it-more-typescript-friendly\"><a href=\"#Making-it-more-typescript-friendly\" class=\"headerlink\" title=\"Making it more typescript friendly\"></a>Making it more typescript friendly</h3><p>Now that we are connecting to the databse lets make it easier to use it and something coloser to what you would expect working with modern libraries.</p>\n<p>First, let’s create the storage class <code>storage.ts</code></p>\n<figure class=\"highlight typescript\"><figcaption><span>storage.ts</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> storage <span class=\"keyword\">from</span> <span class=\"string\">\"azure-storage\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> dotenv <span class=\"keyword\">from</span> <span class=\"string\">\"dotenv\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">dotenv.load();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Storage&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> tableService : storage.TableService;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> tableName: <span class=\"built_in\">string</span> = <span class=\"string\">\"default\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.tableService = storage.createTableService();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">async</span> Create(tableName: <span class=\"built_in\">string</span>) : <span class=\"built_in\">Promise</span>&lt;Storage&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> me = <span class=\"keyword\">new</span> Storage()</span><br><span class=\"line\">        me.tableName = tableName;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> me.CreateIfDoesntExistTable();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> me;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">async</span> CreateIfDoesntExistTable() : <span class=\"built_in\">Promise</span>&lt;storage.TableService.TableResult&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.tableService.createTableIfNotExists(<span class=\"keyword\">this</span>.tableName, <span class=\"function\">(<span class=\"params\">err,result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">                    resolve(result);</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (err) &#123; reject(err); &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Ok, I know that this is a lot to take just once. We kept the same imports from <code>index.ts</code>. Now we are creating the storage class to abstract the calls to the storage</p>\n<p>First, we are initiating the table service in the constructor since this is a process that does not execute or have any external dependency meaning that it is ok to put that in the constructor.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.tableService = storage.createTableService();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>We kept that constructor private since we don’t want someone to initiate the Storage class without a table name.</p>\n<p>Since to create a table it is required a call to an external dependency we create a “factory” for it so we are using the static method create as a way of doing that and on it, we make sure that the table it is created.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">async</span> Create(tableName: <span class=\"built_in\">string</span>) : <span class=\"built_in\">Promise</span>&lt;Storage&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> me = <span class=\"keyword\">new</span> Storage()</span><br><span class=\"line\">    me.tableName = tableName;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> me.CreateIfDoesntExistTable();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> me;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The Azure storage library does not support Promises yet instead it uses call back but not only that some of the errors in the library are not thrown back in as callback errors but as actual errors in your javascript execution (invalid table name, for example, would not come back as a callback error)</p>\n<p>So in order to make the request resembling a more modern typescript ( and javascript), we encapsulate that in one async method</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">async</span> CreateIfDoesntExistTable() : <span class=\"built_in\">Promise</span>&lt;storage.TableService.TableResult&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.tableService.createTableIfNotExists(<span class=\"keyword\">this</span>.tableName, <span class=\"function\">(<span class=\"params\">err,result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">                    resolve(result);</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (err) &#123; reject(err); &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>Now it is time to change back our <code>index.ts</code> but before that, since we are going to be working with async new we need to change our <code>tsconfig.json</code> we need to tell typescript that we are going to be targeting es6 or later so on the <code>&quot;target&quot;: &quot;es5&quot;,</code> in the <code>tsconfig.json</code> file change it to <code>&quot;target&quot;: &quot;es6&quot;,</code> that way you can use the async keyword</p>\n<p>Them changing the <code>index.ts</code> to look like this:</p>\n<figure class=\"highlight typescript\"><figcaption><span>index.ts</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Storage &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"./storage\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> tableName = <span class=\"string\">\"sampletable\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">await</span> Storage.Create(tableName);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Table created\"</span>);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<p>As you can see we remove all the imports now to use only our storage class and change out initialization to use one async “hack”:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"params\">async</span> =&gt;</span> &#123;   &#125;)()</span><br></pre></td></tr></table></figure>\n<p>It is an easy way to create one async method that executes after created.</p>\n<p>Now we just need to call out factory method <code>await Storage.Create(tableName);</code> to guarantee that our table it is created.</p>\n<p>Now you can execute the code again in the console using:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tsc | node ./index.js</span><br></pre></td></tr></table></figure>\n<h3 id=\"Inserting-your-first-entities\"><a href=\"#Inserting-your-first-entities\" class=\"headerlink\" title=\"Inserting your first entities\"></a>Inserting your first entities</h3><p>Now that we have the table created and can connect to it time to insert some resources on it.</p>\n<p>lets change first and add a new method on our <code>storage.ts</code> to the <code>Storage</code> class</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> AddOrMergeRecord(record: ITableEntity): <span class=\"built_in\">Promise</span>&lt;ITableEntity&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> tr = <span class=\"keyword\">this</span>.convertToTableRecord(record);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.tableService.insertOrMergeEntity(<span class=\"keyword\">this</span>.tableName, tr, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">            resolve(record);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">        reject(err);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Again we are using the same technic to convert the insertOrMergeEntity to be using promise instead of callback.</p>\n<p>This method should be failing now because there are 2 things we need to add because of the way that objects are stored in table storage. In table storage a property it is always one object with 2 properties <code>$</code> and <code>_</code> being <code>$</code> the type to be stored and <code>_</code> the value to be stored. More than that another thing that you can see it is that the method accepts only <code>ITableEntity</code> this happens because we need to guarantee that the properties of <code>PartitionKey</code> and <code>RowKey</code> are strings and present in every single object that we need to insert.</p>\n<p>So lets add the code to make this work first we are going to add the interface of <code>ITableEntity</code> after the last line of our <code>storage.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> ITableEntity &#123;</span><br><span class=\"line\">    PartitionKey?: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    RowKey?: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    [key: <span class=\"built_in\">string</span>]: <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span> | <span class=\"built_in\">boolean</span> | <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>You are just requesting an object to have this 2 properties the <code>[key: string]: string | number | boolean | undefined;</code> allow the object to have any other property of the types supported by table storage.</p>\n<p>Now we need to write the code to convert the <code>ITableEntity</code> in something that it is supported by table storage fortunatly for us there is a utility helper built in into the library.</p>\n<p>We are going to add the missing method in the <code>Storage</code> class in the <code>storage.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> convertToTableRecord(entity: ITableEntity) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result: <span class=\"built_in\">any</span> = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.keys(entity).forEach(<span class=\"function\"><span class=\"params\">k</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> prop = <span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(entity, k);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (prop) &#123;</span><br><span class=\"line\">        result[k] = <span class=\"keyword\">new</span> storage.TableUtilities.entityGenerator.EntityProperty(</span><br><span class=\"line\">          prop.value</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The importent line here to look at it is the <code>storage.TableUtilities.entityGenerator.EntityProperty</code> that will transform an value of any type in a value following the needs for the storage library.</p>\n<p>Time to change our <code>index.ts</code></p>\n<p>the new code should be something like this:</p>\n<figure class=\"highlight typescript\"><figcaption><span>index.ts</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Storage &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"./storage\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> tableName = <span class=\"string\">\"sampletable\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> storage = <span class=\"keyword\">await</span> Storage.Create(tableName);</span><br><span class=\"line\">  <span class=\"keyword\">await</span> storage.AddOrMergeRecord(&#123;</span><br><span class=\"line\">    PartitionKey: <span class=\"string\">\"SamplePartition\"</span>,</span><br><span class=\"line\">    RowKey: <span class=\"string\">\"SampleRow\"</span>,</span><br><span class=\"line\">    SampleInt: <span class=\"number\">42</span>,</span><br><span class=\"line\">    SampleString: <span class=\"string\">\"Amazing!\"</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Record added\"</span>);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<p>As you can see we only added the <code>AddOrMergeRecord</code> you can add as many properties as you want.</p>\n<p>Now to execute again:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tsc | node ./index.js</span><br></pre></td></tr></table></figure>\n<p>You should have your first record inserted into the table.</p>\n<h3 id=\"Quering-entities-entities\"><a href=\"#Quering-entities-entities\" class=\"headerlink\" title=\"Quering entities entities\"></a>Quering entities entities</h3><p>There are multiple ways to query the table storage the most common being retrieve a single row by Partition and Row Id.</p>\n<p>Lets add this functionality first</p>\n<p>Again in our <code>storage.ts</code> lets add a method to query by both this value.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> GetRecord(partitionKey: <span class=\"built_in\">string</span>, rowKey: <span class=\"built_in\">string</span>): <span class=\"built_in\">Promise</span>&lt;ITableEntity&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>&lt;ITableEntity&gt;<span class=\"function\">(<span class=\"params\">(<span class=\"params\">resolve, reject</span>) =&gt; &#123;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">      <span class=\"keyword\">this</span>.tableService.retrieveEntity&lt;ITableEntity&gt;(<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"params\">        <span class=\"keyword\">this</span>.tableName,</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"params\">        partitionKey,</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"params\">        rowKey,</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"params\">        (<span class=\"params\">err, entity</span>) =&gt; &#123;</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"params\">          <span class=\"keyword\">if</span> (<span class=\"params\">err</span>) <span class=\"keyword\">throw</span> err;</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"params\">          resolve(<span class=\"params\">entity</span>);</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"params\">        &#125;</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"params\">      </span>);</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    &#125;</span>);</span></span><br><span class=\"line\"><span class=\"function\">  &#125;</span></span><br></pre></td></tr></table></figure>\n<p>Again we are using the same strategy of covering a method in something that can be used as a Promise to a more modern javascript way of programing but not that much changes from the method itself.</p>\n<p>Lets change the <code>index.ts</code> to use this query. Just include after inserting the entity the following code:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> record = <span class=\"keyword\">await</span> storage.GetRecord(<span class=\"string\">\"SamplePartition\"</span>, <span class=\"string\">\"SampleRow\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.info(record);</span><br></pre></td></tr></table></figure>\n<p>Now if you compile again (<code>tsc</code>) and run (<code>node ./index.js</code>) you will see the entity being returned but not exacly what you expected.</p>\n<p>You are getting somethign like:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; <span class=\"attr\">PartitionKey</span>: &#123; <span class=\"string\">'$'</span>: <span class=\"string\">'Edm.String'</span>, <span class=\"attr\">_</span>: <span class=\"string\">'SamplePartition'</span> &#125;,</span><br><span class=\"line\">  RowKey: &#123; <span class=\"string\">'$'</span>: <span class=\"string\">'Edm.String'</span>, <span class=\"attr\">_</span>: <span class=\"string\">'SampleRow'</span> &#125;,</span><br><span class=\"line\">  Timestamp: &#123; <span class=\"string\">'$'</span>: <span class=\"string\">'Edm.DateTime'</span>, <span class=\"attr\">_</span>: <span class=\"number\">2018</span><span class=\"number\">-07</span><span class=\"number\">-08</span>T19:<span class=\"number\">28</span>:<span class=\"number\">12.574</span>Z &#125;,</span><br><span class=\"line\">  SampleInt: &#123; <span class=\"attr\">_</span>: <span class=\"number\">42</span> &#125;,</span><br><span class=\"line\">  SampleString: &#123; <span class=\"attr\">_</span>: <span class=\"string\">'Amazing!'</span> &#125;,</span><br><span class=\"line\">  <span class=\"string\">'.metadata'</span>:</span><br><span class=\"line\">   &#123; <span class=\"attr\">metadata</span>:</span><br><span class=\"line\">      <span class=\"string\">'https://xxx.table.core.windows.net/$metadata#sampletable/@Element'</span>,</span><br><span class=\"line\">     etag: <span class=\"string\">'W/\"datetime\\'2018-07-08T19%3A28%3A12.5744502Z\\'\"'</span> &#125; &#125;</span><br></pre></td></tr></table></figure>\n<p>That it is not what an object of javascript should look like. so lets get back to our javascript and convert the results in something more javascript like.</p>\n<p>The same way that we created the <code>convertToTableRecord</code> we are going to create now the <code>tableRecordToJavacript</code> method as a private method in the <code>Storage</code> class.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> tableRecordToJavacript(entity: ITableEntity): ITableEntity &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result: <span class=\"built_in\">any</span> = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.keys(entity).forEach(<span class=\"function\"><span class=\"params\">k</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// we do not want to decode metadata</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (k !== <span class=\"string\">\".metadata\"</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> prop = <span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(entity, k);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (prop) &#123;</span><br><span class=\"line\">          result[k] = prop.value[<span class=\"string\">\"_\"</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>Now we just need to change the <code>GetRecord</code> method to use the private method:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> GetRecord(partitionKey: <span class=\"built_in\">string</span>, rowKey: <span class=\"built_in\">string</span>): <span class=\"built_in\">Promise</span>&lt;ITableEntity&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>&lt;ITableEntity&gt;<span class=\"function\">(<span class=\"params\">(<span class=\"params\">resolve, reject</span>) =&gt; &#123;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">      <span class=\"keyword\">this</span>.tableService.retrieveEntity&lt;ITableEntity&gt;(<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"params\">        <span class=\"keyword\">this</span>.tableName,</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"params\">        partitionKey,</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"params\">        rowKey,</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"params\">        (<span class=\"params\">err, entity</span>) =&gt; &#123;</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"params\">          <span class=\"keyword\">if</span> (<span class=\"params\">err</span>) <span class=\"keyword\">throw</span> err;</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"params\">          resolve(<span class=\"params\"><span class=\"keyword\">this</span>.tableRecordToJavacript(<span class=\"params\">entity</span>)</span>);</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"params\">        &#125;</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"params\">      </span>);</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    &#125;</span>);</span></span><br><span class=\"line\"><span class=\"function\">  &#125;</span></span><br></pre></td></tr></table></figure>\n<p>Now when you execute you should get the expected result.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; <span class=\"attr\">PartitionKey</span>: <span class=\"string\">'SamplePartition'</span>,</span><br><span class=\"line\">  RowKey: <span class=\"string\">'SampleRow'</span>,</span><br><span class=\"line\">  Timestamp: <span class=\"number\">2018</span><span class=\"number\">-07</span><span class=\"number\">-08</span>T19:<span class=\"number\">54</span>:<span class=\"number\">49.427</span>Z,</span><br><span class=\"line\">  SampleInt: <span class=\"number\">42</span>,</span><br><span class=\"line\">  SampleString: <span class=\"string\">'Amazing!'</span> &#125;</span><br></pre></td></tr></table></figure>"},{"title":"The Hamiltonian path problem!","date":"2018-01-29T01:01:01.000Z","_content":"\nI was watching the video on [Numberfile](https://www.youtube.com/watch?v=G1m7goLCJDY) with Matt Parker he proposed a simple problem that you receive all the positive integers up to a certain number and you need to arrange them in a new order so that the sum of any 2 adjacent numbers will be a square number. Spoil alert now I will be giving a valid solution so if you are trying to solve that by yourself go there and try it (maybe the title has given you the idea of the solution already).\n\n<!-- more -->\n\nMatt explains the problem much better than me, so for a better explanation. if you watch the [extra footage](https://youtu.be/7_ph5djCCnM) you would see that Charlie Turner shows that for the numbers greater than 24 util 299 all of them work and there is a conjecture that it would work for all numbers larger than 24.\n\nSeeing that I just thought that \"Wait 299 its a way small number\". I know how to program this seams like a really easy program to make so why can I just prove this for something like prove there are solutions up to 500,000 and not only that get all the valid solutions up to 500,000.\n\nThe first thing that I checked was how hard was to get the [Hamiltonian path](https://en.wikipedia.org/wiki/Hamiltonian_path) in a graph and turns out that it is an [NP-Complete](https://en.wikipedia.org/wiki/NP-completeness) problem. This is not something that is really encouraging when you realize that the problem that you are trying to solve it is an NP-Complete problem. I thought that the fact that this is an NP-Complete problem for the solution of any graph doesn't mean that it is an NP-Complete problem for the solution of the graph in question we might have some tricks to do that would make solving this for the graph in question a bit easier than the general case. There are for example some sufficient conditions for the Hamiltonian path that might work in less than exponential time to check if the graphs have a Hamiltonian path without the need to actually find this path. Some examples of this tricks can be seen on this [awesome math stack exchange response](https://math.stackexchange.com/questions/130425/hamiltonian-path-detection)\n\nSo I decided to start with the simple things I need to generate this graphs a simple c# console app would solve that for me:\n\nI am using the following data model (I know I used ulong when I could have used uint but I was really hopeful in the beginning) :\n\n```csharp\n    public struct HamiltonianGraph\n    {\n        public Dictionary<ulong, HashSet<ulong>> Nodes { get; set; }\n        public int NumberOfVertices { get; set; }\n        public int NumberOfEdges { get; set; }\n        public bool HasSolution { get; set; }\n        public ConcurrentBag<HashSet<ulong>> Solutions { get;set; }\n    }\n```\n\nMy basic program to generate the graphs was:\n\n```csharp\n    static void Main(string[] args)\n    {\n        ulong maxNumber = 5000;\n        var graph = GenerateFiles(maxNumber);\n        Console.WriteLine(\"The End!\");\n    }\n    private static HamiltonianGraph GenerateFiles(ulong maxNumber)\n    {\n        HamiltonianGraph graph = new HamiltonianGraph();\n        graph.Nodes = new Dictionary<ulong, HashSet<ulong>>();\n        var lastNumberOfEdges = 0;\n        for (ulong i = 1; i <= maxNumber; i++)\n        {\n            graph.Nodes.Add(i, new HashSet<ulong>());\n            graph.NumberOfVertices++;\n            for (ulong j = 1; j < i; j++)\n            {\n                if (IsSquare(i + j))\n                {\n                    graph.NumberOfEdges++;\n                    graph.Nodes[i].Add(j);\n                    graph.Nodes[j].Add(i);\n                }\n            }\n            Console.WriteLine($\"Vertice Added: {i.ToString(\"00000\")} Number of Edges: {graph.NumberOfEdges} Edges per vertice: {(graph.NumberOfEdges / (graph.NumberOfVertices * 1.0)).ToString(\"F2\")}, Edges added: {graph.NumberOfEdges - lastNumberOfEdges}\");\n            lastNumberOfEdges = graph.NumberOfEdges;\n            File.WriteAllText($\"cache/{i.ToString(\"00000000\")}.json\", JsonConvert.SerializeObject(savegraph));\n        }\n        return graph;\n    }\n    static bool IsSquare(ulong apositiveint)\n    {\n        return Math.Sqrt(apositiveint) % 1 == 0;\n    }\n\n```\n\nAs you can see by the number of zeros that I put on the file numbers I was really hopeful that I would be able to generate and test thousands of files. THee process of generating files was too slow and the files were getting really large especially after 7000 and since I don't have such a big hard drive I decided to stop there (I actually did some changes to save it to the cloud to m\\ake it available to more people but we will talk about that in the next blog post)\n\nAnother improvement that I did in order to generate the files with the graphs was to get a better algorithm to verify that a number it is a square number. you can see some really clever ways to do this on this [stack overflow answer](https://stackoverflow.com/questions/295579/fastest-way-to-determine-if-an-integers-square-root-is-an-integer)\n\nso after that, the code for `IsSquare` changed to:\n\n```csharp\nstatic bool IsSquare(ulong apositiveint)\n{\n    switch ((int)(apositiveint & 0x3F))\n    {\n        case 0x00:\n        case 0x01:\n        case 0x04:\n        case 0x09:\n        case 0x10:\n        case 0x11:\n        case 0x19:\n        case 0x21:\n        case 0x24:\n        case 0x29:\n        case 0x31:\n        case 0x39:\n            return Math.Sqrt(apositiveint) % 1 == 0;\n        default:\n            return false;\n    }\n}\n```\n\nwas not the most optimized way to do it but was something that I could read easily and gave me most of the performance benefits.\n\nNow that I had a way to generate the graphs and had them generated up to 7000 was the time to verify if there was a Hamiltonian path to each one of this graphs. As I said previously I like to start with the simplest solution: so I used what I know about backtracking and made a simple solution based on backtracking that would try a deep first approach\n\n```csharp\nprivate bool IsHamiltonian(ulong n, HashSet<ulong> sequence, Dictionary<ulong, HashSet<ulong>> currentNodes)\n{\n    //Adding the number the the current sequence\n    sequence.Add(n);\n    //if the sequence it is as big as the whole graph stop because we fould a solution\n    if (sequence.Count == currentNodes.Count)\n    {\n        return true;\n    }\n    //Get all the nodes that I can reach from the current node\n    HashSet<ulong> reachableNodes = currentNodes[n];\n    //check the for each one of the intenal nodes if there will be a solution;\n    foreach (var destinationNode in reachableNodes)\n    {\n        //if the path doesnt lead to a node already visited\n        if (!sequence.Contains(destinationNode))\n        {\n            // recustivily check the solution to the rest of the nodes\n            bool result = IsHamiltonian(destinationNode, sequence, currentNodes);\n            //if there was a solution for this path returns\n            if (result)\n                return true;\n        }\n    }\n    //if you arrive here this meand that this path it is nto valid so remove this node and returns false\n    sequence.Remove(n);\n    return false;\n}\n```\n\nThis is a basic implementation but that works. I would be more than happy to pass hours only talking about this simple algorithm and how it could be improved (I might do that in following posts).\n\nThe problem with this it is in order to prove that there is no Hamiltonian path you need to tray starting from all the vertices in your graph.\n\nso the code to verify a graph was the following:\n\n```csharp\npublic HamiltonianGraph VerifyHamilton(HamiltonianGraph graph)\n{\n    if (graph.Nodes.Count > 3)\n    {\n        foreach (var node in graph.Nodes)\n        {\n            var solution = new HashSet<ulong>();\n            if (IsHamiltonian(node.Key, solution, graph.Nodes))\n            {\n                Console.WriteLine($\"Solution for {graph.Nodes.Count} Starting at: {node.Key}, Solution: {string.Join(':', solution)}\");\n                graph.Solutions.Add(solution);\n                graph.HasSolution = true;\n                return graph;\n            }\n        }\n    }\n    return graph;\n}\n```\n\nI got up to 80 (all proven to be correct) before I got tired of this slow solution and decided to try some optimization and do some things differently. But this is the base case. Let me know if you found interesting. I will be posting some optimizations and how you can leverage from cloud computing to scale that up for you in future posts.\n","source":"_posts/hamiltonian-path-problem.md","raw":"---\ntitle: The Hamiltonian path problem!\ndate: 2018/01/29 01:01:01\n---\n\nI was watching the video on [Numberfile](https://www.youtube.com/watch?v=G1m7goLCJDY) with Matt Parker he proposed a simple problem that you receive all the positive integers up to a certain number and you need to arrange them in a new order so that the sum of any 2 adjacent numbers will be a square number. Spoil alert now I will be giving a valid solution so if you are trying to solve that by yourself go there and try it (maybe the title has given you the idea of the solution already).\n\n<!-- more -->\n\nMatt explains the problem much better than me, so for a better explanation. if you watch the [extra footage](https://youtu.be/7_ph5djCCnM) you would see that Charlie Turner shows that for the numbers greater than 24 util 299 all of them work and there is a conjecture that it would work for all numbers larger than 24.\n\nSeeing that I just thought that \"Wait 299 its a way small number\". I know how to program this seams like a really easy program to make so why can I just prove this for something like prove there are solutions up to 500,000 and not only that get all the valid solutions up to 500,000.\n\nThe first thing that I checked was how hard was to get the [Hamiltonian path](https://en.wikipedia.org/wiki/Hamiltonian_path) in a graph and turns out that it is an [NP-Complete](https://en.wikipedia.org/wiki/NP-completeness) problem. This is not something that is really encouraging when you realize that the problem that you are trying to solve it is an NP-Complete problem. I thought that the fact that this is an NP-Complete problem for the solution of any graph doesn't mean that it is an NP-Complete problem for the solution of the graph in question we might have some tricks to do that would make solving this for the graph in question a bit easier than the general case. There are for example some sufficient conditions for the Hamiltonian path that might work in less than exponential time to check if the graphs have a Hamiltonian path without the need to actually find this path. Some examples of this tricks can be seen on this [awesome math stack exchange response](https://math.stackexchange.com/questions/130425/hamiltonian-path-detection)\n\nSo I decided to start with the simple things I need to generate this graphs a simple c# console app would solve that for me:\n\nI am using the following data model (I know I used ulong when I could have used uint but I was really hopeful in the beginning) :\n\n```csharp\n    public struct HamiltonianGraph\n    {\n        public Dictionary<ulong, HashSet<ulong>> Nodes { get; set; }\n        public int NumberOfVertices { get; set; }\n        public int NumberOfEdges { get; set; }\n        public bool HasSolution { get; set; }\n        public ConcurrentBag<HashSet<ulong>> Solutions { get;set; }\n    }\n```\n\nMy basic program to generate the graphs was:\n\n```csharp\n    static void Main(string[] args)\n    {\n        ulong maxNumber = 5000;\n        var graph = GenerateFiles(maxNumber);\n        Console.WriteLine(\"The End!\");\n    }\n    private static HamiltonianGraph GenerateFiles(ulong maxNumber)\n    {\n        HamiltonianGraph graph = new HamiltonianGraph();\n        graph.Nodes = new Dictionary<ulong, HashSet<ulong>>();\n        var lastNumberOfEdges = 0;\n        for (ulong i = 1; i <= maxNumber; i++)\n        {\n            graph.Nodes.Add(i, new HashSet<ulong>());\n            graph.NumberOfVertices++;\n            for (ulong j = 1; j < i; j++)\n            {\n                if (IsSquare(i + j))\n                {\n                    graph.NumberOfEdges++;\n                    graph.Nodes[i].Add(j);\n                    graph.Nodes[j].Add(i);\n                }\n            }\n            Console.WriteLine($\"Vertice Added: {i.ToString(\"00000\")} Number of Edges: {graph.NumberOfEdges} Edges per vertice: {(graph.NumberOfEdges / (graph.NumberOfVertices * 1.0)).ToString(\"F2\")}, Edges added: {graph.NumberOfEdges - lastNumberOfEdges}\");\n            lastNumberOfEdges = graph.NumberOfEdges;\n            File.WriteAllText($\"cache/{i.ToString(\"00000000\")}.json\", JsonConvert.SerializeObject(savegraph));\n        }\n        return graph;\n    }\n    static bool IsSquare(ulong apositiveint)\n    {\n        return Math.Sqrt(apositiveint) % 1 == 0;\n    }\n\n```\n\nAs you can see by the number of zeros that I put on the file numbers I was really hopeful that I would be able to generate and test thousands of files. THee process of generating files was too slow and the files were getting really large especially after 7000 and since I don't have such a big hard drive I decided to stop there (I actually did some changes to save it to the cloud to m\\ake it available to more people but we will talk about that in the next blog post)\n\nAnother improvement that I did in order to generate the files with the graphs was to get a better algorithm to verify that a number it is a square number. you can see some really clever ways to do this on this [stack overflow answer](https://stackoverflow.com/questions/295579/fastest-way-to-determine-if-an-integers-square-root-is-an-integer)\n\nso after that, the code for `IsSquare` changed to:\n\n```csharp\nstatic bool IsSquare(ulong apositiveint)\n{\n    switch ((int)(apositiveint & 0x3F))\n    {\n        case 0x00:\n        case 0x01:\n        case 0x04:\n        case 0x09:\n        case 0x10:\n        case 0x11:\n        case 0x19:\n        case 0x21:\n        case 0x24:\n        case 0x29:\n        case 0x31:\n        case 0x39:\n            return Math.Sqrt(apositiveint) % 1 == 0;\n        default:\n            return false;\n    }\n}\n```\n\nwas not the most optimized way to do it but was something that I could read easily and gave me most of the performance benefits.\n\nNow that I had a way to generate the graphs and had them generated up to 7000 was the time to verify if there was a Hamiltonian path to each one of this graphs. As I said previously I like to start with the simplest solution: so I used what I know about backtracking and made a simple solution based on backtracking that would try a deep first approach\n\n```csharp\nprivate bool IsHamiltonian(ulong n, HashSet<ulong> sequence, Dictionary<ulong, HashSet<ulong>> currentNodes)\n{\n    //Adding the number the the current sequence\n    sequence.Add(n);\n    //if the sequence it is as big as the whole graph stop because we fould a solution\n    if (sequence.Count == currentNodes.Count)\n    {\n        return true;\n    }\n    //Get all the nodes that I can reach from the current node\n    HashSet<ulong> reachableNodes = currentNodes[n];\n    //check the for each one of the intenal nodes if there will be a solution;\n    foreach (var destinationNode in reachableNodes)\n    {\n        //if the path doesnt lead to a node already visited\n        if (!sequence.Contains(destinationNode))\n        {\n            // recustivily check the solution to the rest of the nodes\n            bool result = IsHamiltonian(destinationNode, sequence, currentNodes);\n            //if there was a solution for this path returns\n            if (result)\n                return true;\n        }\n    }\n    //if you arrive here this meand that this path it is nto valid so remove this node and returns false\n    sequence.Remove(n);\n    return false;\n}\n```\n\nThis is a basic implementation but that works. I would be more than happy to pass hours only talking about this simple algorithm and how it could be improved (I might do that in following posts).\n\nThe problem with this it is in order to prove that there is no Hamiltonian path you need to tray starting from all the vertices in your graph.\n\nso the code to verify a graph was the following:\n\n```csharp\npublic HamiltonianGraph VerifyHamilton(HamiltonianGraph graph)\n{\n    if (graph.Nodes.Count > 3)\n    {\n        foreach (var node in graph.Nodes)\n        {\n            var solution = new HashSet<ulong>();\n            if (IsHamiltonian(node.Key, solution, graph.Nodes))\n            {\n                Console.WriteLine($\"Solution for {graph.Nodes.Count} Starting at: {node.Key}, Solution: {string.Join(':', solution)}\");\n                graph.Solutions.Add(solution);\n                graph.HasSolution = true;\n                return graph;\n            }\n        }\n    }\n    return graph;\n}\n```\n\nI got up to 80 (all proven to be correct) before I got tired of this slow solution and decided to try some optimization and do some things differently. But this is the base case. Let me know if you found interesting. I will be posting some optimizations and how you can leverage from cloud computing to scale that up for you in future posts.\n","slug":"hamiltonian-path-problem","published":1,"updated":"2018-07-08T06:21:51.323Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjck5mng0005ecmr92gqzddh","content":"<p>I was watching the video on <a href=\"https://www.youtube.com/watch?v=G1m7goLCJDY\" target=\"_blank\" rel=\"noopener\">Numberfile</a> with Matt Parker he proposed a simple problem that you receive all the positive integers up to a certain number and you need to arrange them in a new order so that the sum of any 2 adjacent numbers will be a square number. Spoil alert now I will be giving a valid solution so if you are trying to solve that by yourself go there and try it (maybe the title has given you the idea of the solution already).</p>\n<a id=\"more\"></a>\n<p>Matt explains the problem much better than me, so for a better explanation. if you watch the <a href=\"https://youtu.be/7_ph5djCCnM\" target=\"_blank\" rel=\"noopener\">extra footage</a> you would see that Charlie Turner shows that for the numbers greater than 24 util 299 all of them work and there is a conjecture that it would work for all numbers larger than 24.</p>\n<p>Seeing that I just thought that “Wait 299 its a way small number”. I know how to program this seams like a really easy program to make so why can I just prove this for something like prove there are solutions up to 500,000 and not only that get all the valid solutions up to 500,000.</p>\n<p>The first thing that I checked was how hard was to get the <a href=\"https://en.wikipedia.org/wiki/Hamiltonian_path\" target=\"_blank\" rel=\"noopener\">Hamiltonian path</a> in a graph and turns out that it is an <a href=\"https://en.wikipedia.org/wiki/NP-completeness\" target=\"_blank\" rel=\"noopener\">NP-Complete</a> problem. This is not something that is really encouraging when you realize that the problem that you are trying to solve it is an NP-Complete problem. I thought that the fact that this is an NP-Complete problem for the solution of any graph doesn’t mean that it is an NP-Complete problem for the solution of the graph in question we might have some tricks to do that would make solving this for the graph in question a bit easier than the general case. There are for example some sufficient conditions for the Hamiltonian path that might work in less than exponential time to check if the graphs have a Hamiltonian path without the need to actually find this path. Some examples of this tricks can be seen on this <a href=\"https://math.stackexchange.com/questions/130425/hamiltonian-path-detection\" target=\"_blank\" rel=\"noopener\">awesome math stack exchange response</a></p>\n<p>So I decided to start with the simple things I need to generate this graphs a simple c# console app would solve that for me:</p>\n<p>I am using the following data model (I know I used ulong when I could have used uint but I was really hopeful in the beginning) :</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">struct</span> HamiltonianGraph</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Dictionary&lt;<span class=\"keyword\">ulong</span>, HashSet&lt;<span class=\"keyword\">ulong</span>&gt;&gt; Nodes &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> NumberOfVertices &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> NumberOfEdges &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> HasSolution &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> ConcurrentBag&lt;HashSet&lt;<span class=\"keyword\">ulong</span>&gt;&gt; Solutions &#123; <span class=\"keyword\">get</span>;<span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>My basic program to generate the graphs was:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">ulong</span> maxNumber = <span class=\"number\">5000</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> graph = GenerateFiles(maxNumber);</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">\"The End!\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> HamiltonianGraph <span class=\"title\">GenerateFiles</span>(<span class=\"params\"><span class=\"keyword\">ulong</span> maxNumber</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    HamiltonianGraph graph = <span class=\"keyword\">new</span> HamiltonianGraph();</span><br><span class=\"line\">    graph.Nodes = <span class=\"keyword\">new</span> Dictionary&lt;<span class=\"keyword\">ulong</span>, HashSet&lt;<span class=\"keyword\">ulong</span>&gt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> lastNumberOfEdges = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">ulong</span> i = <span class=\"number\">1</span>; i &lt;= maxNumber; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        graph.Nodes.Add(i, <span class=\"keyword\">new</span> HashSet&lt;<span class=\"keyword\">ulong</span>&gt;());</span><br><span class=\"line\">        graph.NumberOfVertices++;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">ulong</span> j = <span class=\"number\">1</span>; j &lt; i; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (IsSquare(i + j))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                graph.NumberOfEdges++;</span><br><span class=\"line\">                graph.Nodes[i].Add(j);</span><br><span class=\"line\">                graph.Nodes[j].Add(i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">$\"Vertice Added: <span class=\"subst\">&#123;i.ToString(<span class=\"string\">\"00000\"</span>)&#125;</span> Number of Edges: <span class=\"subst\">&#123;graph.NumberOfEdges&#125;</span> Edges per vertice: <span class=\"subst\">&#123;(graph.NumberOfEdges / (graph.NumberOfVertices * <span class=\"number\">1.0</span>)).ToString(<span class=\"string\">\"F2\"</span>)&#125;</span>, Edges added: <span class=\"subst\">&#123;graph.NumberOfEdges - lastNumberOfEdges&#125;</span>\"</span>);</span><br><span class=\"line\">        lastNumberOfEdges = graph.NumberOfEdges;</span><br><span class=\"line\">        File.WriteAllText(<span class=\"string\">$\"cache/<span class=\"subst\">&#123;i.ToString(<span class=\"string\">\"00000000\"</span>)&#125;</span>.json\"</span>, JsonConvert.SerializeObject(savegraph));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> graph;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"title\">IsSquare</span>(<span class=\"params\"><span class=\"keyword\">ulong</span> apositiveint</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Math.Sqrt(apositiveint) % <span class=\"number\">1</span> == <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>As you can see by the number of zeros that I put on the file numbers I was really hopeful that I would be able to generate and test thousands of files. THee process of generating files was too slow and the files were getting really large especially after 7000 and since I don’t have such a big hard drive I decided to stop there (I actually did some changes to save it to the cloud to m\\ake it available to more people but we will talk about that in the next blog post)</p>\n<p>Another improvement that I did in order to generate the files with the graphs was to get a better algorithm to verify that a number it is a square number. you can see some really clever ways to do this on this <a href=\"https://stackoverflow.com/questions/295579/fastest-way-to-determine-if-an-integers-square-root-is-an-integer\" target=\"_blank\" rel=\"noopener\">stack overflow answer</a></p>\n<p>so after that, the code for <code>IsSquare</code> changed to:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"title\">IsSquare</span>(<span class=\"params\"><span class=\"keyword\">ulong</span> apositiveint</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> ((<span class=\"keyword\">int</span>)(apositiveint &amp; <span class=\"number\">0x3F</span>))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">0x00</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">0x01</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">0x04</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">0x09</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">0x10</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">0x11</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">0x19</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">0x21</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">0x24</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">0x29</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">0x31</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">0x39</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Math.Sqrt(apositiveint) % <span class=\"number\">1</span> == <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>was not the most optimized way to do it but was something that I could read easily and gave me most of the performance benefits.</p>\n<p>Now that I had a way to generate the graphs and had them generated up to 7000 was the time to verify if there was a Hamiltonian path to each one of this graphs. As I said previously I like to start with the simplest solution: so I used what I know about backtracking and made a simple solution based on backtracking that would try a deep first approach</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">bool</span> <span class=\"title\">IsHamiltonian</span>(<span class=\"params\"><span class=\"keyword\">ulong</span> n, HashSet&lt;<span class=\"keyword\">ulong</span>&gt; sequence, Dictionary&lt;<span class=\"keyword\">ulong</span>, HashSet&lt;<span class=\"keyword\">ulong</span>&gt;&gt; currentNodes</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//Adding the number the the current sequence</span></span><br><span class=\"line\">    sequence.Add(n);</span><br><span class=\"line\">    <span class=\"comment\">//if the sequence it is as big as the whole graph stop because we fould a solution</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sequence.Count == currentNodes.Count)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//Get all the nodes that I can reach from the current node</span></span><br><span class=\"line\">    HashSet&lt;<span class=\"keyword\">ulong</span>&gt; reachableNodes = currentNodes[n];</span><br><span class=\"line\">    <span class=\"comment\">//check the for each one of the intenal nodes if there will be a solution;</span></span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> destinationNode <span class=\"keyword\">in</span> reachableNodes)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//if the path doesnt lead to a node already visited</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!sequence.Contains(destinationNode))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// recustivily check the solution to the rest of the nodes</span></span><br><span class=\"line\">            <span class=\"keyword\">bool</span> result = IsHamiltonian(destinationNode, sequence, currentNodes);</span><br><span class=\"line\">            <span class=\"comment\">//if there was a solution for this path returns</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (result)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//if you arrive here this meand that this path it is nto valid so remove this node and returns false</span></span><br><span class=\"line\">    sequence.Remove(n);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>This is a basic implementation but that works. I would be more than happy to pass hours only talking about this simple algorithm and how it could be improved (I might do that in following posts).</p>\n<p>The problem with this it is in order to prove that there is no Hamiltonian path you need to tray starting from all the vertices in your graph.</p>\n<p>so the code to verify a graph was the following:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> HamiltonianGraph <span class=\"title\">VerifyHamilton</span>(<span class=\"params\">HamiltonianGraph graph</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (graph.Nodes.Count &gt; <span class=\"number\">3</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> node <span class=\"keyword\">in</span> graph.Nodes)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> solution = <span class=\"keyword\">new</span> HashSet&lt;<span class=\"keyword\">ulong</span>&gt;();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (IsHamiltonian(node.Key, solution, graph.Nodes))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Console.WriteLine(<span class=\"string\">$\"Solution for <span class=\"subst\">&#123;graph.Nodes.Count&#125;</span> Starting at: <span class=\"subst\">&#123;node.Key&#125;</span>, Solution: <span class=\"subst\">&#123;<span class=\"keyword\">string</span>.Join(<span class=\"string\">':'</span>, solution)&#125;</span>\"</span>);</span><br><span class=\"line\">                graph.Solutions.Add(solution);</span><br><span class=\"line\">                graph.HasSolution = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> graph;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> graph;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>I got up to 80 (all proven to be correct) before I got tired of this slow solution and decided to try some optimization and do some things differently. But this is the base case. Let me know if you found interesting. I will be posting some optimizations and how you can leverage from cloud computing to scale that up for you in future posts.</p>\n","site":{"data":{}},"excerpt":"<p>I was watching the video on <a href=\"https://www.youtube.com/watch?v=G1m7goLCJDY\" target=\"_blank\" rel=\"noopener\">Numberfile</a> with Matt Parker he proposed a simple problem that you receive all the positive integers up to a certain number and you need to arrange them in a new order so that the sum of any 2 adjacent numbers will be a square number. Spoil alert now I will be giving a valid solution so if you are trying to solve that by yourself go there and try it (maybe the title has given you the idea of the solution already).</p>","more":"<p>Matt explains the problem much better than me, so for a better explanation. if you watch the <a href=\"https://youtu.be/7_ph5djCCnM\" target=\"_blank\" rel=\"noopener\">extra footage</a> you would see that Charlie Turner shows that for the numbers greater than 24 util 299 all of them work and there is a conjecture that it would work for all numbers larger than 24.</p>\n<p>Seeing that I just thought that “Wait 299 its a way small number”. I know how to program this seams like a really easy program to make so why can I just prove this for something like prove there are solutions up to 500,000 and not only that get all the valid solutions up to 500,000.</p>\n<p>The first thing that I checked was how hard was to get the <a href=\"https://en.wikipedia.org/wiki/Hamiltonian_path\" target=\"_blank\" rel=\"noopener\">Hamiltonian path</a> in a graph and turns out that it is an <a href=\"https://en.wikipedia.org/wiki/NP-completeness\" target=\"_blank\" rel=\"noopener\">NP-Complete</a> problem. This is not something that is really encouraging when you realize that the problem that you are trying to solve it is an NP-Complete problem. I thought that the fact that this is an NP-Complete problem for the solution of any graph doesn’t mean that it is an NP-Complete problem for the solution of the graph in question we might have some tricks to do that would make solving this for the graph in question a bit easier than the general case. There are for example some sufficient conditions for the Hamiltonian path that might work in less than exponential time to check if the graphs have a Hamiltonian path without the need to actually find this path. Some examples of this tricks can be seen on this <a href=\"https://math.stackexchange.com/questions/130425/hamiltonian-path-detection\" target=\"_blank\" rel=\"noopener\">awesome math stack exchange response</a></p>\n<p>So I decided to start with the simple things I need to generate this graphs a simple c# console app would solve that for me:</p>\n<p>I am using the following data model (I know I used ulong when I could have used uint but I was really hopeful in the beginning) :</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">struct</span> HamiltonianGraph</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Dictionary&lt;<span class=\"keyword\">ulong</span>, HashSet&lt;<span class=\"keyword\">ulong</span>&gt;&gt; Nodes &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> NumberOfVertices &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> NumberOfEdges &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> HasSolution &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> ConcurrentBag&lt;HashSet&lt;<span class=\"keyword\">ulong</span>&gt;&gt; Solutions &#123; <span class=\"keyword\">get</span>;<span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>My basic program to generate the graphs was:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">ulong</span> maxNumber = <span class=\"number\">5000</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> graph = GenerateFiles(maxNumber);</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">\"The End!\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> HamiltonianGraph <span class=\"title\">GenerateFiles</span>(<span class=\"params\"><span class=\"keyword\">ulong</span> maxNumber</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    HamiltonianGraph graph = <span class=\"keyword\">new</span> HamiltonianGraph();</span><br><span class=\"line\">    graph.Nodes = <span class=\"keyword\">new</span> Dictionary&lt;<span class=\"keyword\">ulong</span>, HashSet&lt;<span class=\"keyword\">ulong</span>&gt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> lastNumberOfEdges = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">ulong</span> i = <span class=\"number\">1</span>; i &lt;= maxNumber; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        graph.Nodes.Add(i, <span class=\"keyword\">new</span> HashSet&lt;<span class=\"keyword\">ulong</span>&gt;());</span><br><span class=\"line\">        graph.NumberOfVertices++;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">ulong</span> j = <span class=\"number\">1</span>; j &lt; i; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (IsSquare(i + j))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                graph.NumberOfEdges++;</span><br><span class=\"line\">                graph.Nodes[i].Add(j);</span><br><span class=\"line\">                graph.Nodes[j].Add(i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">$\"Vertice Added: <span class=\"subst\">&#123;i.ToString(<span class=\"string\">\"00000\"</span>)&#125;</span> Number of Edges: <span class=\"subst\">&#123;graph.NumberOfEdges&#125;</span> Edges per vertice: <span class=\"subst\">&#123;(graph.NumberOfEdges / (graph.NumberOfVertices * <span class=\"number\">1.0</span>)).ToString(<span class=\"string\">\"F2\"</span>)&#125;</span>, Edges added: <span class=\"subst\">&#123;graph.NumberOfEdges - lastNumberOfEdges&#125;</span>\"</span>);</span><br><span class=\"line\">        lastNumberOfEdges = graph.NumberOfEdges;</span><br><span class=\"line\">        File.WriteAllText(<span class=\"string\">$\"cache/<span class=\"subst\">&#123;i.ToString(<span class=\"string\">\"00000000\"</span>)&#125;</span>.json\"</span>, JsonConvert.SerializeObject(savegraph));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> graph;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"title\">IsSquare</span>(<span class=\"params\"><span class=\"keyword\">ulong</span> apositiveint</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Math.Sqrt(apositiveint) % <span class=\"number\">1</span> == <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>As you can see by the number of zeros that I put on the file numbers I was really hopeful that I would be able to generate and test thousands of files. THee process of generating files was too slow and the files were getting really large especially after 7000 and since I don’t have such a big hard drive I decided to stop there (I actually did some changes to save it to the cloud to m\\ake it available to more people but we will talk about that in the next blog post)</p>\n<p>Another improvement that I did in order to generate the files with the graphs was to get a better algorithm to verify that a number it is a square number. you can see some really clever ways to do this on this <a href=\"https://stackoverflow.com/questions/295579/fastest-way-to-determine-if-an-integers-square-root-is-an-integer\" target=\"_blank\" rel=\"noopener\">stack overflow answer</a></p>\n<p>so after that, the code for <code>IsSquare</code> changed to:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"title\">IsSquare</span>(<span class=\"params\"><span class=\"keyword\">ulong</span> apositiveint</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> ((<span class=\"keyword\">int</span>)(apositiveint &amp; <span class=\"number\">0x3F</span>))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">0x00</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">0x01</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">0x04</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">0x09</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">0x10</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">0x11</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">0x19</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">0x21</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">0x24</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">0x29</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">0x31</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">0x39</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Math.Sqrt(apositiveint) % <span class=\"number\">1</span> == <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>was not the most optimized way to do it but was something that I could read easily and gave me most of the performance benefits.</p>\n<p>Now that I had a way to generate the graphs and had them generated up to 7000 was the time to verify if there was a Hamiltonian path to each one of this graphs. As I said previously I like to start with the simplest solution: so I used what I know about backtracking and made a simple solution based on backtracking that would try a deep first approach</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">bool</span> <span class=\"title\">IsHamiltonian</span>(<span class=\"params\"><span class=\"keyword\">ulong</span> n, HashSet&lt;<span class=\"keyword\">ulong</span>&gt; sequence, Dictionary&lt;<span class=\"keyword\">ulong</span>, HashSet&lt;<span class=\"keyword\">ulong</span>&gt;&gt; currentNodes</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//Adding the number the the current sequence</span></span><br><span class=\"line\">    sequence.Add(n);</span><br><span class=\"line\">    <span class=\"comment\">//if the sequence it is as big as the whole graph stop because we fould a solution</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sequence.Count == currentNodes.Count)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//Get all the nodes that I can reach from the current node</span></span><br><span class=\"line\">    HashSet&lt;<span class=\"keyword\">ulong</span>&gt; reachableNodes = currentNodes[n];</span><br><span class=\"line\">    <span class=\"comment\">//check the for each one of the intenal nodes if there will be a solution;</span></span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> destinationNode <span class=\"keyword\">in</span> reachableNodes)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//if the path doesnt lead to a node already visited</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!sequence.Contains(destinationNode))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// recustivily check the solution to the rest of the nodes</span></span><br><span class=\"line\">            <span class=\"keyword\">bool</span> result = IsHamiltonian(destinationNode, sequence, currentNodes);</span><br><span class=\"line\">            <span class=\"comment\">//if there was a solution for this path returns</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (result)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//if you arrive here this meand that this path it is nto valid so remove this node and returns false</span></span><br><span class=\"line\">    sequence.Remove(n);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>This is a basic implementation but that works. I would be more than happy to pass hours only talking about this simple algorithm and how it could be improved (I might do that in following posts).</p>\n<p>The problem with this it is in order to prove that there is no Hamiltonian path you need to tray starting from all the vertices in your graph.</p>\n<p>so the code to verify a graph was the following:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> HamiltonianGraph <span class=\"title\">VerifyHamilton</span>(<span class=\"params\">HamiltonianGraph graph</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (graph.Nodes.Count &gt; <span class=\"number\">3</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> node <span class=\"keyword\">in</span> graph.Nodes)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> solution = <span class=\"keyword\">new</span> HashSet&lt;<span class=\"keyword\">ulong</span>&gt;();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (IsHamiltonian(node.Key, solution, graph.Nodes))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Console.WriteLine(<span class=\"string\">$\"Solution for <span class=\"subst\">&#123;graph.Nodes.Count&#125;</span> Starting at: <span class=\"subst\">&#123;node.Key&#125;</span>, Solution: <span class=\"subst\">&#123;<span class=\"keyword\">string</span>.Join(<span class=\"string\">':'</span>, solution)&#125;</span>\"</span>);</span><br><span class=\"line\">                graph.Solutions.Add(solution);</span><br><span class=\"line\">                graph.HasSolution = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> graph;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> graph;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>I got up to 80 (all proven to be correct) before I got tired of this slow solution and decided to try some optimization and do some things differently. But this is the base case. Let me know if you found interesting. I will be posting some optimizations and how you can leverage from cloud computing to scale that up for you in future posts.</p>"},{"title":"DNS as code with azure DNS and terraform","date":"2018-02-28T01:01:01.000Z","_content":"\nIf your current request for a subdomain requires you to contact the infra team open a ticket and wait for few days until you can test this new cool website on your custom subdomain this might interest you. Even if you are not currently an Azure customer or not currently using terraform this is very easy to setup feature that will help you streamline your domain management.\n\nThe code for this example can be found at: [https://github.com/Nepomuceno/sample-terraform-dns](https://github.com/Nepomuceno/sample-terraform-dns)\n\n<!--More-->\n\n## Setting up terraform\n\nIf you have not installed terraform you should first install it. fortunately for you, there is excellent documentation on how to do it on [microsoft docs](https://docs.microsoft.com/en-us/azure/virtual-machines/linux/terraform-install-configure)\n\nbut if you don't want to install terraform you can use the cloud shell to play with it. You can go to [shell.azure.com](https://shell.azure.com) or open it from inside the portal. Terraform it is already installed by default for you on the azure could shell.\n\nYou can check if terraform it is installed on your system by typing:\n\n```sh\nterraform --version\n```\n\nYou should see an output with the current version of Terraform that you will be using at the time that I am writing this the version of the cloud shell it is `v0.11.3`.\n\n## Defining Azure resources\n\nNow that you have Terraform installed time to create your first `tf` file.\n\nI will be using [VSCode](https://code.visualstudio.com/) to manage my project I recommend you to use it to since it has a good [terraform extension](https://marketplace.visualstudio.com/items?itemName=mauve.terraform)\n\nOpen the folder of your infrastructure project in VSCode.\nCreate a file called `mydomain_com_dns.tf` (everytime that I put here `mydomain.com` you should actually put your domain name), there is no requirement on the name of your tf files but I just think this makes things easier.\n\nThe first thing you need to define that your provider will be Azure you can do this by putting on the beginning of the file:\n\n```yaml\nprovider \"azurerm\" {\n}\n```\n\nAfter that, we are going to create a resource group. if you are not familiar with Azure, especially the new azure resource manager, imagine a resource group as bring a folder where you put your resources on.\n\n```yaml\nresource \"azurerm_resource_group\" \"dns_management\" {\n  name     = \"dns-managment\"\n  location = \"West US\"\n}\n```\n\nNow that you have where to put your resources time to create your DNS zone, this is basically creating a DNS manager for your domain.\n\n```yaml\nresource \"azurerm_dns_zone\" \"mydomaincom\" {\n  name                = \"mdomain.com\"\n  resource_group_name = \"${azurerm_resource_group.dns_management.name}\"\n}\n```\n\nThis will create the zone for you. You can see that I used the terraform variable in the resource group name `${azurerm_resource_group.dns_management.name}` this it keeps consistency and it is considered the best practice when using terraform.\n\nNow let's create an A (called here `azurerm_dns_a_recod`) domain record:\n\n```yaml\nresource \"azurerm_dns_a_record\" \"projectmydomain\" {\n  name                = \"project\"\n  zone_name           = \"${azurerm_dns_zone.mydomaincom.name}\"\n  resource_group_name = \"${azurerm_resource_group.dns_management.name}\"\n  ttl                 = 300\n  records             = [\"127.0.0.1\"]\n}\n```\n\nYou can see again the use of variables and you will see that this is really common on Terraform.\n\n## Appling changes\n\nIf it is the first time using Terraform you will need to setup a user for it you can do it easily with [azure cli](https://docs.microsoft.com/en-us/cli/azure/install-azure-cli?view=azure-cli-latest)\n\n```bash\naz ad sp create-for-rbac --name terraform-automation --password \"YOUR_SECRET_PASSWORD\"\n```\n\nYou will see a response to everything that you will need to configure terraform\n\n```json\n{\n  \"appId\": \"YOUR_APPLICATION_GUID\",\n  \"displayName\": \"terraform-automation\",\n  \"name\": \"http://terraform-automation\",\n  \"password\": \"YOUR_SECRET_PASSWORD\",\n  \"tenant\": \"YOUR_TENANT_GUID\"\n}\n```\n\nYou should use environment variables in order to modify where you are deploying with Terraform (you can also use this on the provider definition but it is not recommended)\n\nYou can do it easily with PowerShell\n\n```powershell\n$env:ARM_SUBSCRIPTION_ID = \"YOUR_SUBSCRIPTION_GUID\"\n$env:ARM_CLIENT_ID= \"YOUR_APPLICATION_GUID\"\n$env:ARM_CLIENT_SECRET= \"YOUR_SECRET_PASSWORD\"\n$env:ARM_TENANT_ID= \"YOUR_TENANT_GUID\"\n```\n\nNow that you have the environment created you would initialize terraform to make use you have all the modules needed\n\n```bash\nterraform init\n```\n\nNow you need to execute the terraform Plan\n\n```bash\nterraform plan\n```\n\nyou will see an output with the documents that will be created\n\n```bash\nAn execution plan has been generated and is shown below.\nResource actions are indicated by the following symbols:\n  + create\n\nTerraform will perform the following actions:\n\n  + azurerm_dns_a_record.projectmydomain\n      id:                        <computed>\n      name:                      \"project\"\n      records.#:                 \"1\"\n      records.3619153832:        \"127.0.0.1\"\n      resource_group_name:       \"dns-managment\"\n      tags.%:                    <computed>\n      ttl:                       \"300\"\n      zone_name:                 \"mydomain.com\"\n\n  + azurerm_dns_zone.mydomaincom\n      id:                        <computed>\n      max_number_of_record_sets: <computed>\n      name:                      \"mydomain.com\"\n      name_servers.#:            <computed>\n      number_of_record_sets:     <computed>\n      resource_group_name:       \"dns-managment\"\n      tags.%:                    <computed>\n\n  + azurerm_resource_group.dns_management\n      id:                        <computed>\n      location:                  \"westeurope\"\n      name:                      \"dns-managment\"\n      tags.%:                    <computed>\n\n\nPlan: 3 to add, 0 to change, 0 to destroy.\n```\n\nYou can verify if this is what you want to create if this is correct you can now apply the plan to\n\n```bash\nterraform apply\n```\n\nTerraform will show you the plan and ask for confirmation. All your resources should now be created and you will get a response back for example:\n\n```bash\nazurerm_resource_group.dns_management: Creating...\n  location: \"\" => \"westeurope\"\n  name:     \"\" => \"dns-managment\"\n  tags.%:   \"\" => \"<computed>\"\nazurerm_resource_group.dns_management: Creation complete after 1s (ID: /subscriptions/YOUR_SUBSCRIPTION/resourceGroups/dns-managment)\nazurerm_dns_zone.mydomaincom: Creating...\n  max_number_of_record_sets: \"\" => \"<computed>\"\n  name:                      \"\" => \"mydomain.com\"\n  name_servers.#:            \"\" => \"<computed>\"\n  number_of_record_sets:     \"\" => \"<computed>\"\n  resource_group_name:       \"\" => \"dns-managment\"\n  tags.%:                    \"\" => \"<computed>\"\nazurerm_dns_zone.mydomaincom: Creation complete after 2s (ID: /subscriptions/YOUR_SUBSCRIPTION/dnszones/mydomain.com)\nazurerm_dns_a_record.projectmydomain: Creating...\n  name:                \"\" => \"project\"\n  records.#:           \"\" => \"1\"\n  records.3619153832:  \"\" => \"127.0.0.1\"\n  resource_group_name: \"\" => \"dns-managment\"\n  tags.%:              \"\" => \"<computed>\"\n  ttl:                 \"\" => \"300\"\n  zone_name:           \"\" => \"mydomain.com\"\nazurerm_dns_a_record.projectmydomain: Creation complete after 1s (ID: /subscriptions/YOUR_SUBSCRIPTION/dnszones/mydomain.com/A/project)\n```\n\nas you can see the whole process of actually applying the configuration took less than 5 seconds.\n\n## Adding a new resource\n\nNow imagine that a developer wants that `awesome.mydomain.com` points to `project.mydomain.com`\n\nAll he needs to do it is to change the `mydomain_com_dns.tf` file to include this CNAME\n\n```yaml\nresource \"azurerm_dns_cname_record\" \"awesomemydomain\" {\n  name                = \"awesome\"\n  zone_name           = \"${azurerm_dns_zone.mydomaincom.name}\"\n  resource_group_name = \"${azurerm_resource_group.dns_management.name}\"\n  ttl                 = 300\n  record              = \"project.mydomain.com\"\n}\n```\n\nNow if you run `terraform apply` again the cname record will be created.\n\nFrom now on managing your DNS it is just a PR away.\n","source":"_posts/dns-as-code-terraform-azure.md","raw":"---\ntitle: DNS as code with azure DNS and terraform\ndate: 2018/02/28 01:01:01\n---\n\nIf your current request for a subdomain requires you to contact the infra team open a ticket and wait for few days until you can test this new cool website on your custom subdomain this might interest you. Even if you are not currently an Azure customer or not currently using terraform this is very easy to setup feature that will help you streamline your domain management.\n\nThe code for this example can be found at: [https://github.com/Nepomuceno/sample-terraform-dns](https://github.com/Nepomuceno/sample-terraform-dns)\n\n<!--More-->\n\n## Setting up terraform\n\nIf you have not installed terraform you should first install it. fortunately for you, there is excellent documentation on how to do it on [microsoft docs](https://docs.microsoft.com/en-us/azure/virtual-machines/linux/terraform-install-configure)\n\nbut if you don't want to install terraform you can use the cloud shell to play with it. You can go to [shell.azure.com](https://shell.azure.com) or open it from inside the portal. Terraform it is already installed by default for you on the azure could shell.\n\nYou can check if terraform it is installed on your system by typing:\n\n```sh\nterraform --version\n```\n\nYou should see an output with the current version of Terraform that you will be using at the time that I am writing this the version of the cloud shell it is `v0.11.3`.\n\n## Defining Azure resources\n\nNow that you have Terraform installed time to create your first `tf` file.\n\nI will be using [VSCode](https://code.visualstudio.com/) to manage my project I recommend you to use it to since it has a good [terraform extension](https://marketplace.visualstudio.com/items?itemName=mauve.terraform)\n\nOpen the folder of your infrastructure project in VSCode.\nCreate a file called `mydomain_com_dns.tf` (everytime that I put here `mydomain.com` you should actually put your domain name), there is no requirement on the name of your tf files but I just think this makes things easier.\n\nThe first thing you need to define that your provider will be Azure you can do this by putting on the beginning of the file:\n\n```yaml\nprovider \"azurerm\" {\n}\n```\n\nAfter that, we are going to create a resource group. if you are not familiar with Azure, especially the new azure resource manager, imagine a resource group as bring a folder where you put your resources on.\n\n```yaml\nresource \"azurerm_resource_group\" \"dns_management\" {\n  name     = \"dns-managment\"\n  location = \"West US\"\n}\n```\n\nNow that you have where to put your resources time to create your DNS zone, this is basically creating a DNS manager for your domain.\n\n```yaml\nresource \"azurerm_dns_zone\" \"mydomaincom\" {\n  name                = \"mdomain.com\"\n  resource_group_name = \"${azurerm_resource_group.dns_management.name}\"\n}\n```\n\nThis will create the zone for you. You can see that I used the terraform variable in the resource group name `${azurerm_resource_group.dns_management.name}` this it keeps consistency and it is considered the best practice when using terraform.\n\nNow let's create an A (called here `azurerm_dns_a_recod`) domain record:\n\n```yaml\nresource \"azurerm_dns_a_record\" \"projectmydomain\" {\n  name                = \"project\"\n  zone_name           = \"${azurerm_dns_zone.mydomaincom.name}\"\n  resource_group_name = \"${azurerm_resource_group.dns_management.name}\"\n  ttl                 = 300\n  records             = [\"127.0.0.1\"]\n}\n```\n\nYou can see again the use of variables and you will see that this is really common on Terraform.\n\n## Appling changes\n\nIf it is the first time using Terraform you will need to setup a user for it you can do it easily with [azure cli](https://docs.microsoft.com/en-us/cli/azure/install-azure-cli?view=azure-cli-latest)\n\n```bash\naz ad sp create-for-rbac --name terraform-automation --password \"YOUR_SECRET_PASSWORD\"\n```\n\nYou will see a response to everything that you will need to configure terraform\n\n```json\n{\n  \"appId\": \"YOUR_APPLICATION_GUID\",\n  \"displayName\": \"terraform-automation\",\n  \"name\": \"http://terraform-automation\",\n  \"password\": \"YOUR_SECRET_PASSWORD\",\n  \"tenant\": \"YOUR_TENANT_GUID\"\n}\n```\n\nYou should use environment variables in order to modify where you are deploying with Terraform (you can also use this on the provider definition but it is not recommended)\n\nYou can do it easily with PowerShell\n\n```powershell\n$env:ARM_SUBSCRIPTION_ID = \"YOUR_SUBSCRIPTION_GUID\"\n$env:ARM_CLIENT_ID= \"YOUR_APPLICATION_GUID\"\n$env:ARM_CLIENT_SECRET= \"YOUR_SECRET_PASSWORD\"\n$env:ARM_TENANT_ID= \"YOUR_TENANT_GUID\"\n```\n\nNow that you have the environment created you would initialize terraform to make use you have all the modules needed\n\n```bash\nterraform init\n```\n\nNow you need to execute the terraform Plan\n\n```bash\nterraform plan\n```\n\nyou will see an output with the documents that will be created\n\n```bash\nAn execution plan has been generated and is shown below.\nResource actions are indicated by the following symbols:\n  + create\n\nTerraform will perform the following actions:\n\n  + azurerm_dns_a_record.projectmydomain\n      id:                        <computed>\n      name:                      \"project\"\n      records.#:                 \"1\"\n      records.3619153832:        \"127.0.0.1\"\n      resource_group_name:       \"dns-managment\"\n      tags.%:                    <computed>\n      ttl:                       \"300\"\n      zone_name:                 \"mydomain.com\"\n\n  + azurerm_dns_zone.mydomaincom\n      id:                        <computed>\n      max_number_of_record_sets: <computed>\n      name:                      \"mydomain.com\"\n      name_servers.#:            <computed>\n      number_of_record_sets:     <computed>\n      resource_group_name:       \"dns-managment\"\n      tags.%:                    <computed>\n\n  + azurerm_resource_group.dns_management\n      id:                        <computed>\n      location:                  \"westeurope\"\n      name:                      \"dns-managment\"\n      tags.%:                    <computed>\n\n\nPlan: 3 to add, 0 to change, 0 to destroy.\n```\n\nYou can verify if this is what you want to create if this is correct you can now apply the plan to\n\n```bash\nterraform apply\n```\n\nTerraform will show you the plan and ask for confirmation. All your resources should now be created and you will get a response back for example:\n\n```bash\nazurerm_resource_group.dns_management: Creating...\n  location: \"\" => \"westeurope\"\n  name:     \"\" => \"dns-managment\"\n  tags.%:   \"\" => \"<computed>\"\nazurerm_resource_group.dns_management: Creation complete after 1s (ID: /subscriptions/YOUR_SUBSCRIPTION/resourceGroups/dns-managment)\nazurerm_dns_zone.mydomaincom: Creating...\n  max_number_of_record_sets: \"\" => \"<computed>\"\n  name:                      \"\" => \"mydomain.com\"\n  name_servers.#:            \"\" => \"<computed>\"\n  number_of_record_sets:     \"\" => \"<computed>\"\n  resource_group_name:       \"\" => \"dns-managment\"\n  tags.%:                    \"\" => \"<computed>\"\nazurerm_dns_zone.mydomaincom: Creation complete after 2s (ID: /subscriptions/YOUR_SUBSCRIPTION/dnszones/mydomain.com)\nazurerm_dns_a_record.projectmydomain: Creating...\n  name:                \"\" => \"project\"\n  records.#:           \"\" => \"1\"\n  records.3619153832:  \"\" => \"127.0.0.1\"\n  resource_group_name: \"\" => \"dns-managment\"\n  tags.%:              \"\" => \"<computed>\"\n  ttl:                 \"\" => \"300\"\n  zone_name:           \"\" => \"mydomain.com\"\nazurerm_dns_a_record.projectmydomain: Creation complete after 1s (ID: /subscriptions/YOUR_SUBSCRIPTION/dnszones/mydomain.com/A/project)\n```\n\nas you can see the whole process of actually applying the configuration took less than 5 seconds.\n\n## Adding a new resource\n\nNow imagine that a developer wants that `awesome.mydomain.com` points to `project.mydomain.com`\n\nAll he needs to do it is to change the `mydomain_com_dns.tf` file to include this CNAME\n\n```yaml\nresource \"azurerm_dns_cname_record\" \"awesomemydomain\" {\n  name                = \"awesome\"\n  zone_name           = \"${azurerm_dns_zone.mydomaincom.name}\"\n  resource_group_name = \"${azurerm_resource_group.dns_management.name}\"\n  ttl                 = 300\n  record              = \"project.mydomain.com\"\n}\n```\n\nNow if you run `terraform apply` again the cname record will be created.\n\nFrom now on managing your DNS it is just a PR away.\n","slug":"dns-as-code-terraform-azure","published":1,"updated":"2018-07-08T06:21:51.322Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjck5mnh0006ecmruv86mzbg","content":"<p>If your current request for a subdomain requires you to contact the infra team open a ticket and wait for few days until you can test this new cool website on your custom subdomain this might interest you. Even if you are not currently an Azure customer or not currently using terraform this is very easy to setup feature that will help you streamline your domain management.</p>\n<p>The code for this example can be found at: <a href=\"https://github.com/Nepomuceno/sample-terraform-dns\" target=\"_blank\" rel=\"noopener\">https://github.com/Nepomuceno/sample-terraform-dns</a></p>\n<a id=\"more\"></a>\n<h2 id=\"Setting-up-terraform\"><a href=\"#Setting-up-terraform\" class=\"headerlink\" title=\"Setting up terraform\"></a>Setting up terraform</h2><p>If you have not installed terraform you should first install it. fortunately for you, there is excellent documentation on how to do it on <a href=\"https://docs.microsoft.com/en-us/azure/virtual-machines/linux/terraform-install-configure\" target=\"_blank\" rel=\"noopener\">microsoft docs</a></p>\n<p>but if you don’t want to install terraform you can use the cloud shell to play with it. You can go to <a href=\"https://shell.azure.com\" target=\"_blank\" rel=\"noopener\">shell.azure.com</a> or open it from inside the portal. Terraform it is already installed by default for you on the azure could shell.</p>\n<p>You can check if terraform it is installed on your system by typing:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">terraform --version</span><br></pre></td></tr></table></figure>\n<p>You should see an output with the current version of Terraform that you will be using at the time that I am writing this the version of the cloud shell it is <code>v0.11.3</code>.</p>\n<h2 id=\"Defining-Azure-resources\"><a href=\"#Defining-Azure-resources\" class=\"headerlink\" title=\"Defining Azure resources\"></a>Defining Azure resources</h2><p>Now that you have Terraform installed time to create your first <code>tf</code> file.</p>\n<p>I will be using <a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"noopener\">VSCode</a> to manage my project I recommend you to use it to since it has a good <a href=\"https://marketplace.visualstudio.com/items?itemName=mauve.terraform\" target=\"_blank\" rel=\"noopener\">terraform extension</a></p>\n<p>Open the folder of your infrastructure project in VSCode.<br>Create a file called <code>mydomain_com_dns.tf</code> (everytime that I put here <code>mydomain.com</code> you should actually put your domain name), there is no requirement on the name of your tf files but I just think this makes things easier.</p>\n<p>The first thing you need to define that your provider will be Azure you can do this by putting on the beginning of the file:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">provider</span> <span class=\"string\">\"azurerm\"</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>After that, we are going to create a resource group. if you are not familiar with Azure, especially the new azure resource manager, imagine a resource group as bring a folder where you put your resources on.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">resource</span> <span class=\"string\">\"azurerm_resource_group\"</span> <span class=\"string\">\"dns_management\"</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\">  <span class=\"string\">name</span>     <span class=\"string\">=</span> <span class=\"string\">\"dns-managment\"</span></span><br><span class=\"line\">  <span class=\"string\">location</span> <span class=\"string\">=</span> <span class=\"string\">\"West US\"</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>Now that you have where to put your resources time to create your DNS zone, this is basically creating a DNS manager for your domain.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">resource</span> <span class=\"string\">\"azurerm_dns_zone\"</span> <span class=\"string\">\"mydomaincom\"</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\">  <span class=\"string\">name</span>                <span class=\"string\">=</span> <span class=\"string\">\"mdomain.com\"</span></span><br><span class=\"line\">  <span class=\"string\">resource_group_name</span> <span class=\"string\">=</span> <span class=\"string\">\"$&#123;azurerm_resource_group.dns_management.name&#125;\"</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>This will create the zone for you. You can see that I used the terraform variable in the resource group name <code>${azurerm_resource_group.dns_management.name}</code> this it keeps consistency and it is considered the best practice when using terraform.</p>\n<p>Now let’s create an A (called here <code>azurerm_dns_a_recod</code>) domain record:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">resource</span> <span class=\"string\">\"azurerm_dns_a_record\"</span> <span class=\"string\">\"projectmydomain\"</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\">  <span class=\"string\">name</span>                <span class=\"string\">=</span> <span class=\"string\">\"project\"</span></span><br><span class=\"line\">  <span class=\"string\">zone_name</span>           <span class=\"string\">=</span> <span class=\"string\">\"$&#123;azurerm_dns_zone.mydomaincom.name&#125;\"</span></span><br><span class=\"line\">  <span class=\"string\">resource_group_name</span> <span class=\"string\">=</span> <span class=\"string\">\"$&#123;azurerm_resource_group.dns_management.name&#125;\"</span></span><br><span class=\"line\">  <span class=\"string\">ttl</span>                 <span class=\"string\">=</span> <span class=\"number\">300</span></span><br><span class=\"line\">  <span class=\"string\">records</span>             <span class=\"string\">=</span> <span class=\"string\">[\"127.0.0.1\"]</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>You can see again the use of variables and you will see that this is really common on Terraform.</p>\n<h2 id=\"Appling-changes\"><a href=\"#Appling-changes\" class=\"headerlink\" title=\"Appling changes\"></a>Appling changes</h2><p>If it is the first time using Terraform you will need to setup a user for it you can do it easily with <a href=\"https://docs.microsoft.com/en-us/cli/azure/install-azure-cli?view=azure-cli-latest\" target=\"_blank\" rel=\"noopener\">azure cli</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">az ad sp create-for-rbac --name terraform-automation --password <span class=\"string\">\"YOUR_SECRET_PASSWORD\"</span></span><br></pre></td></tr></table></figure>\n<p>You will see a response to everything that you will need to configure terraform</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"appId\"</span>: <span class=\"string\">\"YOUR_APPLICATION_GUID\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"displayName\"</span>: <span class=\"string\">\"terraform-automation\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"http://terraform-automation\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"password\"</span>: <span class=\"string\">\"YOUR_SECRET_PASSWORD\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"tenant\"</span>: <span class=\"string\">\"YOUR_TENANT_GUID\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>You should use environment variables in order to modify where you are deploying with Terraform (you can also use this on the provider definition but it is not recommended)</p>\n<p>You can do it easily with PowerShell</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$env:ARM_SUBSCRIPTION_ID</span> = <span class=\"string\">\"YOUR_SUBSCRIPTION_GUID\"</span></span><br><span class=\"line\"><span class=\"variable\">$env:ARM_CLIENT_ID</span>= <span class=\"string\">\"YOUR_APPLICATION_GUID\"</span></span><br><span class=\"line\"><span class=\"variable\">$env:ARM_CLIENT_SECRET</span>= <span class=\"string\">\"YOUR_SECRET_PASSWORD\"</span></span><br><span class=\"line\"><span class=\"variable\">$env:ARM_TENANT_ID</span>= <span class=\"string\">\"YOUR_TENANT_GUID\"</span></span><br></pre></td></tr></table></figure>\n<p>Now that you have the environment created you would initialize terraform to make use you have all the modules needed</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">terraform init</span><br></pre></td></tr></table></figure>\n<p>Now you need to execute the terraform Plan</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">terraform plan</span><br></pre></td></tr></table></figure>\n<p>you will see an output with the documents that will be created</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">An execution plan has been generated and is shown below.</span><br><span class=\"line\">Resource actions are indicated by the following symbols:</span><br><span class=\"line\">  + create</span><br><span class=\"line\"></span><br><span class=\"line\">Terraform will perform the following actions:</span><br><span class=\"line\"></span><br><span class=\"line\">  + azurerm_dns_a_record.projectmydomain</span><br><span class=\"line\">      id:                        &lt;computed&gt;</span><br><span class=\"line\">      name:                      <span class=\"string\">\"project\"</span></span><br><span class=\"line\">      records.<span class=\"comment\">#:                 \"1\"</span></span><br><span class=\"line\">      records.3619153832:        <span class=\"string\">\"127.0.0.1\"</span></span><br><span class=\"line\">      resource_group_name:       <span class=\"string\">\"dns-managment\"</span></span><br><span class=\"line\">      tags.%:                    &lt;computed&gt;</span><br><span class=\"line\">      ttl:                       <span class=\"string\">\"300\"</span></span><br><span class=\"line\">      zone_name:                 <span class=\"string\">\"mydomain.com\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">  + azurerm_dns_zone.mydomaincom</span><br><span class=\"line\">      id:                        &lt;computed&gt;</span><br><span class=\"line\">      max_number_of_record_sets: &lt;computed&gt;</span><br><span class=\"line\">      name:                      <span class=\"string\">\"mydomain.com\"</span></span><br><span class=\"line\">      name_servers.<span class=\"comment\">#:            &lt;computed&gt;</span></span><br><span class=\"line\">      number_of_record_sets:     &lt;computed&gt;</span><br><span class=\"line\">      resource_group_name:       <span class=\"string\">\"dns-managment\"</span></span><br><span class=\"line\">      tags.%:                    &lt;computed&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  + azurerm_resource_group.dns_management</span><br><span class=\"line\">      id:                        &lt;computed&gt;</span><br><span class=\"line\">      location:                  <span class=\"string\">\"westeurope\"</span></span><br><span class=\"line\">      name:                      <span class=\"string\">\"dns-managment\"</span></span><br><span class=\"line\">      tags.%:                    &lt;computed&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Plan: 3 to add, 0 to change, 0 to destroy.</span><br></pre></td></tr></table></figure>\n<p>You can verify if this is what you want to create if this is correct you can now apply the plan to</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">terraform apply</span><br></pre></td></tr></table></figure>\n<p>Terraform will show you the plan and ask for confirmation. All your resources should now be created and you will get a response back for example:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">azurerm_resource_group.dns_management: Creating...</span><br><span class=\"line\">  location: <span class=\"string\">\"\"</span> =&gt; <span class=\"string\">\"westeurope\"</span></span><br><span class=\"line\">  name:     <span class=\"string\">\"\"</span> =&gt; <span class=\"string\">\"dns-managment\"</span></span><br><span class=\"line\">  tags.%:   <span class=\"string\">\"\"</span> =&gt; <span class=\"string\">\"&lt;computed&gt;\"</span></span><br><span class=\"line\">azurerm_resource_group.dns_management: Creation complete after 1s (ID: /subscriptions/YOUR_SUBSCRIPTION/resourceGroups/dns-managment)</span><br><span class=\"line\">azurerm_dns_zone.mydomaincom: Creating...</span><br><span class=\"line\">  max_number_of_record_sets: <span class=\"string\">\"\"</span> =&gt; <span class=\"string\">\"&lt;computed&gt;\"</span></span><br><span class=\"line\">  name:                      <span class=\"string\">\"\"</span> =&gt; <span class=\"string\">\"mydomain.com\"</span></span><br><span class=\"line\">  name_servers.<span class=\"comment\">#:            \"\" =&gt; \"&lt;computed&gt;\"</span></span><br><span class=\"line\">  number_of_record_sets:     <span class=\"string\">\"\"</span> =&gt; <span class=\"string\">\"&lt;computed&gt;\"</span></span><br><span class=\"line\">  resource_group_name:       <span class=\"string\">\"\"</span> =&gt; <span class=\"string\">\"dns-managment\"</span></span><br><span class=\"line\">  tags.%:                    <span class=\"string\">\"\"</span> =&gt; <span class=\"string\">\"&lt;computed&gt;\"</span></span><br><span class=\"line\">azurerm_dns_zone.mydomaincom: Creation complete after 2s (ID: /subscriptions/YOUR_SUBSCRIPTION/dnszones/mydomain.com)</span><br><span class=\"line\">azurerm_dns_a_record.projectmydomain: Creating...</span><br><span class=\"line\">  name:                <span class=\"string\">\"\"</span> =&gt; <span class=\"string\">\"project\"</span></span><br><span class=\"line\">  records.<span class=\"comment\">#:           \"\" =&gt; \"1\"</span></span><br><span class=\"line\">  records.3619153832:  <span class=\"string\">\"\"</span> =&gt; <span class=\"string\">\"127.0.0.1\"</span></span><br><span class=\"line\">  resource_group_name: <span class=\"string\">\"\"</span> =&gt; <span class=\"string\">\"dns-managment\"</span></span><br><span class=\"line\">  tags.%:              <span class=\"string\">\"\"</span> =&gt; <span class=\"string\">\"&lt;computed&gt;\"</span></span><br><span class=\"line\">  ttl:                 <span class=\"string\">\"\"</span> =&gt; <span class=\"string\">\"300\"</span></span><br><span class=\"line\">  zone_name:           <span class=\"string\">\"\"</span> =&gt; <span class=\"string\">\"mydomain.com\"</span></span><br><span class=\"line\">azurerm_dns_a_record.projectmydomain: Creation complete after 1s (ID: /subscriptions/YOUR_SUBSCRIPTION/dnszones/mydomain.com/A/project)</span><br></pre></td></tr></table></figure>\n<p>as you can see the whole process of actually applying the configuration took less than 5 seconds.</p>\n<h2 id=\"Adding-a-new-resource\"><a href=\"#Adding-a-new-resource\" class=\"headerlink\" title=\"Adding a new resource\"></a>Adding a new resource</h2><p>Now imagine that a developer wants that <code>awesome.mydomain.com</code> points to <code>project.mydomain.com</code></p>\n<p>All he needs to do it is to change the <code>mydomain_com_dns.tf</code> file to include this CNAME</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">resource</span> <span class=\"string\">\"azurerm_dns_cname_record\"</span> <span class=\"string\">\"awesomemydomain\"</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\">  <span class=\"string\">name</span>                <span class=\"string\">=</span> <span class=\"string\">\"awesome\"</span></span><br><span class=\"line\">  <span class=\"string\">zone_name</span>           <span class=\"string\">=</span> <span class=\"string\">\"$&#123;azurerm_dns_zone.mydomaincom.name&#125;\"</span></span><br><span class=\"line\">  <span class=\"string\">resource_group_name</span> <span class=\"string\">=</span> <span class=\"string\">\"$&#123;azurerm_resource_group.dns_management.name&#125;\"</span></span><br><span class=\"line\">  <span class=\"string\">ttl</span>                 <span class=\"string\">=</span> <span class=\"number\">300</span></span><br><span class=\"line\">  <span class=\"string\">record</span>              <span class=\"string\">=</span> <span class=\"string\">\"project.mydomain.com\"</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>Now if you run <code>terraform apply</code> again the cname record will be created.</p>\n<p>From now on managing your DNS it is just a PR away.</p>\n","site":{"data":{}},"excerpt":"<p>If your current request for a subdomain requires you to contact the infra team open a ticket and wait for few days until you can test this new cool website on your custom subdomain this might interest you. Even if you are not currently an Azure customer or not currently using terraform this is very easy to setup feature that will help you streamline your domain management.</p>\n<p>The code for this example can be found at: <a href=\"https://github.com/Nepomuceno/sample-terraform-dns\" target=\"_blank\" rel=\"noopener\">https://github.com/Nepomuceno/sample-terraform-dns</a></p>","more":"<h2 id=\"Setting-up-terraform\"><a href=\"#Setting-up-terraform\" class=\"headerlink\" title=\"Setting up terraform\"></a>Setting up terraform</h2><p>If you have not installed terraform you should first install it. fortunately for you, there is excellent documentation on how to do it on <a href=\"https://docs.microsoft.com/en-us/azure/virtual-machines/linux/terraform-install-configure\" target=\"_blank\" rel=\"noopener\">microsoft docs</a></p>\n<p>but if you don’t want to install terraform you can use the cloud shell to play with it. You can go to <a href=\"https://shell.azure.com\" target=\"_blank\" rel=\"noopener\">shell.azure.com</a> or open it from inside the portal. Terraform it is already installed by default for you on the azure could shell.</p>\n<p>You can check if terraform it is installed on your system by typing:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">terraform --version</span><br></pre></td></tr></table></figure>\n<p>You should see an output with the current version of Terraform that you will be using at the time that I am writing this the version of the cloud shell it is <code>v0.11.3</code>.</p>\n<h2 id=\"Defining-Azure-resources\"><a href=\"#Defining-Azure-resources\" class=\"headerlink\" title=\"Defining Azure resources\"></a>Defining Azure resources</h2><p>Now that you have Terraform installed time to create your first <code>tf</code> file.</p>\n<p>I will be using <a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"noopener\">VSCode</a> to manage my project I recommend you to use it to since it has a good <a href=\"https://marketplace.visualstudio.com/items?itemName=mauve.terraform\" target=\"_blank\" rel=\"noopener\">terraform extension</a></p>\n<p>Open the folder of your infrastructure project in VSCode.<br>Create a file called <code>mydomain_com_dns.tf</code> (everytime that I put here <code>mydomain.com</code> you should actually put your domain name), there is no requirement on the name of your tf files but I just think this makes things easier.</p>\n<p>The first thing you need to define that your provider will be Azure you can do this by putting on the beginning of the file:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">provider</span> <span class=\"string\">\"azurerm\"</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>After that, we are going to create a resource group. if you are not familiar with Azure, especially the new azure resource manager, imagine a resource group as bring a folder where you put your resources on.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">resource</span> <span class=\"string\">\"azurerm_resource_group\"</span> <span class=\"string\">\"dns_management\"</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\">  <span class=\"string\">name</span>     <span class=\"string\">=</span> <span class=\"string\">\"dns-managment\"</span></span><br><span class=\"line\">  <span class=\"string\">location</span> <span class=\"string\">=</span> <span class=\"string\">\"West US\"</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>Now that you have where to put your resources time to create your DNS zone, this is basically creating a DNS manager for your domain.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">resource</span> <span class=\"string\">\"azurerm_dns_zone\"</span> <span class=\"string\">\"mydomaincom\"</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\">  <span class=\"string\">name</span>                <span class=\"string\">=</span> <span class=\"string\">\"mdomain.com\"</span></span><br><span class=\"line\">  <span class=\"string\">resource_group_name</span> <span class=\"string\">=</span> <span class=\"string\">\"$&#123;azurerm_resource_group.dns_management.name&#125;\"</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>This will create the zone for you. You can see that I used the terraform variable in the resource group name <code>${azurerm_resource_group.dns_management.name}</code> this it keeps consistency and it is considered the best practice when using terraform.</p>\n<p>Now let’s create an A (called here <code>azurerm_dns_a_recod</code>) domain record:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">resource</span> <span class=\"string\">\"azurerm_dns_a_record\"</span> <span class=\"string\">\"projectmydomain\"</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\">  <span class=\"string\">name</span>                <span class=\"string\">=</span> <span class=\"string\">\"project\"</span></span><br><span class=\"line\">  <span class=\"string\">zone_name</span>           <span class=\"string\">=</span> <span class=\"string\">\"$&#123;azurerm_dns_zone.mydomaincom.name&#125;\"</span></span><br><span class=\"line\">  <span class=\"string\">resource_group_name</span> <span class=\"string\">=</span> <span class=\"string\">\"$&#123;azurerm_resource_group.dns_management.name&#125;\"</span></span><br><span class=\"line\">  <span class=\"string\">ttl</span>                 <span class=\"string\">=</span> <span class=\"number\">300</span></span><br><span class=\"line\">  <span class=\"string\">records</span>             <span class=\"string\">=</span> <span class=\"string\">[\"127.0.0.1\"]</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>You can see again the use of variables and you will see that this is really common on Terraform.</p>\n<h2 id=\"Appling-changes\"><a href=\"#Appling-changes\" class=\"headerlink\" title=\"Appling changes\"></a>Appling changes</h2><p>If it is the first time using Terraform you will need to setup a user for it you can do it easily with <a href=\"https://docs.microsoft.com/en-us/cli/azure/install-azure-cli?view=azure-cli-latest\" target=\"_blank\" rel=\"noopener\">azure cli</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">az ad sp create-for-rbac --name terraform-automation --password <span class=\"string\">\"YOUR_SECRET_PASSWORD\"</span></span><br></pre></td></tr></table></figure>\n<p>You will see a response to everything that you will need to configure terraform</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"appId\"</span>: <span class=\"string\">\"YOUR_APPLICATION_GUID\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"displayName\"</span>: <span class=\"string\">\"terraform-automation\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"http://terraform-automation\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"password\"</span>: <span class=\"string\">\"YOUR_SECRET_PASSWORD\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"tenant\"</span>: <span class=\"string\">\"YOUR_TENANT_GUID\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>You should use environment variables in order to modify where you are deploying with Terraform (you can also use this on the provider definition but it is not recommended)</p>\n<p>You can do it easily with PowerShell</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$env:ARM_SUBSCRIPTION_ID</span> = <span class=\"string\">\"YOUR_SUBSCRIPTION_GUID\"</span></span><br><span class=\"line\"><span class=\"variable\">$env:ARM_CLIENT_ID</span>= <span class=\"string\">\"YOUR_APPLICATION_GUID\"</span></span><br><span class=\"line\"><span class=\"variable\">$env:ARM_CLIENT_SECRET</span>= <span class=\"string\">\"YOUR_SECRET_PASSWORD\"</span></span><br><span class=\"line\"><span class=\"variable\">$env:ARM_TENANT_ID</span>= <span class=\"string\">\"YOUR_TENANT_GUID\"</span></span><br></pre></td></tr></table></figure>\n<p>Now that you have the environment created you would initialize terraform to make use you have all the modules needed</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">terraform init</span><br></pre></td></tr></table></figure>\n<p>Now you need to execute the terraform Plan</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">terraform plan</span><br></pre></td></tr></table></figure>\n<p>you will see an output with the documents that will be created</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">An execution plan has been generated and is shown below.</span><br><span class=\"line\">Resource actions are indicated by the following symbols:</span><br><span class=\"line\">  + create</span><br><span class=\"line\"></span><br><span class=\"line\">Terraform will perform the following actions:</span><br><span class=\"line\"></span><br><span class=\"line\">  + azurerm_dns_a_record.projectmydomain</span><br><span class=\"line\">      id:                        &lt;computed&gt;</span><br><span class=\"line\">      name:                      <span class=\"string\">\"project\"</span></span><br><span class=\"line\">      records.<span class=\"comment\">#:                 \"1\"</span></span><br><span class=\"line\">      records.3619153832:        <span class=\"string\">\"127.0.0.1\"</span></span><br><span class=\"line\">      resource_group_name:       <span class=\"string\">\"dns-managment\"</span></span><br><span class=\"line\">      tags.%:                    &lt;computed&gt;</span><br><span class=\"line\">      ttl:                       <span class=\"string\">\"300\"</span></span><br><span class=\"line\">      zone_name:                 <span class=\"string\">\"mydomain.com\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">  + azurerm_dns_zone.mydomaincom</span><br><span class=\"line\">      id:                        &lt;computed&gt;</span><br><span class=\"line\">      max_number_of_record_sets: &lt;computed&gt;</span><br><span class=\"line\">      name:                      <span class=\"string\">\"mydomain.com\"</span></span><br><span class=\"line\">      name_servers.<span class=\"comment\">#:            &lt;computed&gt;</span></span><br><span class=\"line\">      number_of_record_sets:     &lt;computed&gt;</span><br><span class=\"line\">      resource_group_name:       <span class=\"string\">\"dns-managment\"</span></span><br><span class=\"line\">      tags.%:                    &lt;computed&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  + azurerm_resource_group.dns_management</span><br><span class=\"line\">      id:                        &lt;computed&gt;</span><br><span class=\"line\">      location:                  <span class=\"string\">\"westeurope\"</span></span><br><span class=\"line\">      name:                      <span class=\"string\">\"dns-managment\"</span></span><br><span class=\"line\">      tags.%:                    &lt;computed&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Plan: 3 to add, 0 to change, 0 to destroy.</span><br></pre></td></tr></table></figure>\n<p>You can verify if this is what you want to create if this is correct you can now apply the plan to</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">terraform apply</span><br></pre></td></tr></table></figure>\n<p>Terraform will show you the plan and ask for confirmation. All your resources should now be created and you will get a response back for example:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">azurerm_resource_group.dns_management: Creating...</span><br><span class=\"line\">  location: <span class=\"string\">\"\"</span> =&gt; <span class=\"string\">\"westeurope\"</span></span><br><span class=\"line\">  name:     <span class=\"string\">\"\"</span> =&gt; <span class=\"string\">\"dns-managment\"</span></span><br><span class=\"line\">  tags.%:   <span class=\"string\">\"\"</span> =&gt; <span class=\"string\">\"&lt;computed&gt;\"</span></span><br><span class=\"line\">azurerm_resource_group.dns_management: Creation complete after 1s (ID: /subscriptions/YOUR_SUBSCRIPTION/resourceGroups/dns-managment)</span><br><span class=\"line\">azurerm_dns_zone.mydomaincom: Creating...</span><br><span class=\"line\">  max_number_of_record_sets: <span class=\"string\">\"\"</span> =&gt; <span class=\"string\">\"&lt;computed&gt;\"</span></span><br><span class=\"line\">  name:                      <span class=\"string\">\"\"</span> =&gt; <span class=\"string\">\"mydomain.com\"</span></span><br><span class=\"line\">  name_servers.<span class=\"comment\">#:            \"\" =&gt; \"&lt;computed&gt;\"</span></span><br><span class=\"line\">  number_of_record_sets:     <span class=\"string\">\"\"</span> =&gt; <span class=\"string\">\"&lt;computed&gt;\"</span></span><br><span class=\"line\">  resource_group_name:       <span class=\"string\">\"\"</span> =&gt; <span class=\"string\">\"dns-managment\"</span></span><br><span class=\"line\">  tags.%:                    <span class=\"string\">\"\"</span> =&gt; <span class=\"string\">\"&lt;computed&gt;\"</span></span><br><span class=\"line\">azurerm_dns_zone.mydomaincom: Creation complete after 2s (ID: /subscriptions/YOUR_SUBSCRIPTION/dnszones/mydomain.com)</span><br><span class=\"line\">azurerm_dns_a_record.projectmydomain: Creating...</span><br><span class=\"line\">  name:                <span class=\"string\">\"\"</span> =&gt; <span class=\"string\">\"project\"</span></span><br><span class=\"line\">  records.<span class=\"comment\">#:           \"\" =&gt; \"1\"</span></span><br><span class=\"line\">  records.3619153832:  <span class=\"string\">\"\"</span> =&gt; <span class=\"string\">\"127.0.0.1\"</span></span><br><span class=\"line\">  resource_group_name: <span class=\"string\">\"\"</span> =&gt; <span class=\"string\">\"dns-managment\"</span></span><br><span class=\"line\">  tags.%:              <span class=\"string\">\"\"</span> =&gt; <span class=\"string\">\"&lt;computed&gt;\"</span></span><br><span class=\"line\">  ttl:                 <span class=\"string\">\"\"</span> =&gt; <span class=\"string\">\"300\"</span></span><br><span class=\"line\">  zone_name:           <span class=\"string\">\"\"</span> =&gt; <span class=\"string\">\"mydomain.com\"</span></span><br><span class=\"line\">azurerm_dns_a_record.projectmydomain: Creation complete after 1s (ID: /subscriptions/YOUR_SUBSCRIPTION/dnszones/mydomain.com/A/project)</span><br></pre></td></tr></table></figure>\n<p>as you can see the whole process of actually applying the configuration took less than 5 seconds.</p>\n<h2 id=\"Adding-a-new-resource\"><a href=\"#Adding-a-new-resource\" class=\"headerlink\" title=\"Adding a new resource\"></a>Adding a new resource</h2><p>Now imagine that a developer wants that <code>awesome.mydomain.com</code> points to <code>project.mydomain.com</code></p>\n<p>All he needs to do it is to change the <code>mydomain_com_dns.tf</code> file to include this CNAME</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">resource</span> <span class=\"string\">\"azurerm_dns_cname_record\"</span> <span class=\"string\">\"awesomemydomain\"</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\">  <span class=\"string\">name</span>                <span class=\"string\">=</span> <span class=\"string\">\"awesome\"</span></span><br><span class=\"line\">  <span class=\"string\">zone_name</span>           <span class=\"string\">=</span> <span class=\"string\">\"$&#123;azurerm_dns_zone.mydomaincom.name&#125;\"</span></span><br><span class=\"line\">  <span class=\"string\">resource_group_name</span> <span class=\"string\">=</span> <span class=\"string\">\"$&#123;azurerm_resource_group.dns_management.name&#125;\"</span></span><br><span class=\"line\">  <span class=\"string\">ttl</span>                 <span class=\"string\">=</span> <span class=\"number\">300</span></span><br><span class=\"line\">  <span class=\"string\">record</span>              <span class=\"string\">=</span> <span class=\"string\">\"project.mydomain.com\"</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>Now if you run <code>terraform apply</code> again the cname record will be created.</p>\n<p>From now on managing your DNS it is just a PR away.</p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}